
Bootloader_MC_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e5c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ff4  08000ff4  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff4  08000ff4  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff4  08000ff4  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000008  08001004  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08001004  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001046  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000078f  00000000  00000000  0002107e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00021810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001185  00000000  00000000  00021b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fd2  00000000  00000000  00022d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000052fa  00000000  00000000  00023cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00028fd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  0002902c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000fd8 	.word	0x08000fd8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000fd8 	.word	0x08000fd8

080001d4 <APARSER_u8AsciiToHex>:
u32 GLB_u32Address  = 0x08004000;

u16 GLB_u16Data[100] ;

u8 APARSER_u8AsciiToHex(u8 Copy_u8Asci)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]

	u8 LOC_u8Result = 0 ;
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]

	if((Copy_u8Asci >=48) && (Copy_u8Asci <=57) )
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b2f      	cmp	r3, #47	; 0x2f
 80001e6:	d906      	bls.n	80001f6 <APARSER_u8AsciiToHex+0x22>
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b39      	cmp	r3, #57	; 0x39
 80001ec:	d803      	bhi.n	80001f6 <APARSER_u8AsciiToHex+0x22>
	{
		LOC_u8Result = Copy_u8Asci - 48 ;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	3b30      	subs	r3, #48	; 0x30
 80001f2:	73fb      	strb	r3, [r7, #15]
 80001f4:	e002      	b.n	80001fc <APARSER_u8AsciiToHex+0x28>
	}
	else
	{
		LOC_u8Result = Copy_u8Asci  - 55 ;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	3b37      	subs	r3, #55	; 0x37
 80001fa:	73fb      	strb	r3, [r7, #15]
	}

	return LOC_u8Result ;
 80001fc:	7bfb      	ldrb	r3, [r7, #15]

}
 80001fe:	4618      	mov	r0, r3
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <APARSER_voidParseRecord>:


void APARSER_voidParseRecord(volatile u8 * Copy_u8BufRecord)
{
 800020a:	b580      	push	{r7, lr}
 800020c:	b082      	sub	sp, #8
 800020e:	af00      	add	r7, sp, #0
 8000210:	6078      	str	r0, [r7, #4]
	switch(Copy_u8BufRecord[8])
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	3308      	adds	r3, #8
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b34      	cmp	r3, #52	; 0x34
 800021c:	d009      	beq.n	8000232 <APARSER_voidParseRecord+0x28>
 800021e:	2b34      	cmp	r3, #52	; 0x34
 8000220:	dc08      	bgt.n	8000234 <APARSER_voidParseRecord+0x2a>
 8000222:	2b30      	cmp	r3, #48	; 0x30
 8000224:	d001      	beq.n	800022a <APARSER_voidParseRecord+0x20>
 8000226:	2b31      	cmp	r3, #49	; 0x31
	{
	case '0' : APARSE_voidParseData(Copy_u8BufRecord);  break ;
	case '4' : /*Set High Address part*/                break ;
	case '1' : /*End Of File*/                          break ;
 8000228:	e004      	b.n	8000234 <APARSER_voidParseRecord+0x2a>
	case '0' : APARSE_voidParseData(Copy_u8BufRecord);  break ;
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f806 	bl	800023c <APARSE_voidParseData>
 8000230:	e000      	b.n	8000234 <APARSER_voidParseRecord+0x2a>
	case '4' : /*Set High Address part*/                break ;
 8000232:	bf00      	nop
	}

}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <APARSE_voidParseData>:


void APARSE_voidParseData(volatile u8* Copy_u8BufData)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	u8 LOC_u8Digit1 ;
	u8 LOC_u8Digit2 ;
	u8 LOC_u8Digit3 ;

	/*Iterator For Data  Loop - counter*/
	u8 LOC_u8Result = 0 ;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]

	/******************************************************************************************************/
	/*############################################### Parsing ############################################*/
	/******************************************************************************************************/
	/*Receive CC*/
	LOC_u8CCDigitHigh = APARSER_u8AsciiToHex(Copy_u8BufData[1]) ;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	4618      	mov	r0, r3
 8000252:	f7ff ffbf 	bl	80001d4 <APARSER_u8AsciiToHex>
 8000256:	4603      	mov	r3, r0
 8000258:	73bb      	strb	r3, [r7, #14]
	LOC_u8CCDigitLow  = APARSER_u8AsciiToHex(Copy_u8BufData[2]);
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3302      	adds	r3, #2
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ffb6 	bl	80001d4 <APARSER_u8AsciiToHex>
 8000268:	4603      	mov	r3, r0
 800026a:	737b      	strb	r3, [r7, #13]
	LOC_u8CharacterCount =  LOC_u8CCDigitHigh<<4 | LOC_u8CCDigitLow ;
 800026c:	7bbb      	ldrb	r3, [r7, #14]
 800026e:	011b      	lsls	r3, r3, #4
 8000270:	b25a      	sxtb	r2, r3
 8000272:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000276:	4313      	orrs	r3, r2
 8000278:	b25b      	sxtb	r3, r3
 800027a:	733b      	strb	r3, [r7, #12]
	/*Receive Low part Address Address*/
	LOC_u8Digit0 = APARSER_u8AsciiToHex(Copy_u8BufData[3]);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3303      	adds	r3, #3
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	b2db      	uxtb	r3, r3
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffa5 	bl	80001d4 <APARSER_u8AsciiToHex>
 800028a:	4603      	mov	r3, r0
 800028c:	72fb      	strb	r3, [r7, #11]
	LOC_u8Digit1 = APARSER_u8AsciiToHex(Copy_u8BufData[4]);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3304      	adds	r3, #4
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff9c 	bl	80001d4 <APARSER_u8AsciiToHex>
 800029c:	4603      	mov	r3, r0
 800029e:	72bb      	strb	r3, [r7, #10]
	LOC_u8Digit2 = APARSER_u8AsciiToHex(Copy_u8BufData[5]);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3305      	adds	r3, #5
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	4618      	mov	r0, r3
 80002aa:	f7ff ff93 	bl	80001d4 <APARSER_u8AsciiToHex>
 80002ae:	4603      	mov	r3, r0
 80002b0:	727b      	strb	r3, [r7, #9]
	LOC_u8Digit3 = APARSER_u8AsciiToHex(Copy_u8BufData[6]);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3306      	adds	r3, #6
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff8a 	bl	80001d4 <APARSER_u8AsciiToHex>
 80002c0:	4603      	mov	r3, r0
 80002c2:	723b      	strb	r3, [r7, #8]

	GLB_u32Address &= 0xFFFF0000 ;  ///4000
 80002c4:	4b3a      	ldr	r3, [pc, #232]	; (80003b0 <APARSE_voidParseData+0x174>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	0c1b      	lsrs	r3, r3, #16
 80002ca:	041b      	lsls	r3, r3, #16
 80002cc:	4a38      	ldr	r2, [pc, #224]	; (80003b0 <APARSE_voidParseData+0x174>)
 80002ce:	6013      	str	r3, [r2, #0]

	GLB_u32Address |= (LOC_u8Digit0<<12) | (LOC_u8Digit1<<8) | (LOC_u8Digit2<<4) |(LOC_u8Digit3)  ;
 80002d0:	7afb      	ldrb	r3, [r7, #11]
 80002d2:	031a      	lsls	r2, r3, #12
 80002d4:	7abb      	ldrb	r3, [r7, #10]
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	431a      	orrs	r2, r3
 80002da:	7a7b      	ldrb	r3, [r7, #9]
 80002dc:	011b      	lsls	r3, r3, #4
 80002de:	431a      	orrs	r2, r3
 80002e0:	7a3b      	ldrb	r3, [r7, #8]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b32      	ldr	r3, [pc, #200]	; (80003b0 <APARSE_voidParseData+0x174>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4313      	orrs	r3, r2
 80002ec:	4a30      	ldr	r2, [pc, #192]	; (80003b0 <APARSE_voidParseData+0x174>)
 80002ee:	6013      	str	r3, [r2, #0]


	for(LOC_u8Result = 0 ; LOC_u8Result < (LOC_u8CharacterCount / 2) ; LOC_u8Result++  )
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]
 80002f4:	e048      	b.n	8000388 <APARSE_voidParseData+0x14c>
	{
		/*Receive  Half Word Data [4 Digits]*/
		LOC_u8Digit0 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 9]);
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	3309      	adds	r3, #9
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	4413      	add	r3, r2
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff65 	bl	80001d4 <APARSER_u8AsciiToHex>
 800030a:	4603      	mov	r3, r0
 800030c:	72fb      	strb	r3, [r7, #11]
		LOC_u8Digit1 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 10]);
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	330a      	adds	r3, #10
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff59 	bl	80001d4 <APARSER_u8AsciiToHex>
 8000322:	4603      	mov	r3, r0
 8000324:	72bb      	strb	r3, [r7, #10]
		LOC_u8Digit2 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 11]);
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	330b      	adds	r3, #11
 800032c:	687a      	ldr	r2, [r7, #4]
 800032e:	4413      	add	r3, r2
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff4d 	bl	80001d4 <APARSER_u8AsciiToHex>
 800033a:	4603      	mov	r3, r0
 800033c:	727b      	strb	r3, [r7, #9]
		LOC_u8Digit3 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 12]);
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	330c      	adds	r3, #12
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	b2db      	uxtb	r3, r3
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff41 	bl	80001d4 <APARSER_u8AsciiToHex>
 8000352:	4603      	mov	r3, r0
 8000354:	723b      	strb	r3, [r7, #8]
		/*because little Endian*/
		GLB_u16Data[LOC_u8Result] = (LOC_u8Digit2<<12) | (LOC_u8Digit3<<8) | (LOC_u8Digit0<<4) |(LOC_u8Digit1)  ;
 8000356:	7a7b      	ldrb	r3, [r7, #9]
 8000358:	031b      	lsls	r3, r3, #12
 800035a:	b21a      	sxth	r2, r3
 800035c:	7a3b      	ldrb	r3, [r7, #8]
 800035e:	021b      	lsls	r3, r3, #8
 8000360:	b21b      	sxth	r3, r3
 8000362:	4313      	orrs	r3, r2
 8000364:	b21a      	sxth	r2, r3
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	011b      	lsls	r3, r3, #4
 800036a:	b21b      	sxth	r3, r3
 800036c:	4313      	orrs	r3, r2
 800036e:	b21a      	sxth	r2, r3
 8000370:	7abb      	ldrb	r3, [r7, #10]
 8000372:	b21b      	sxth	r3, r3
 8000374:	4313      	orrs	r3, r2
 8000376:	b21a      	sxth	r2, r3
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	b291      	uxth	r1, r2
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <APARSE_voidParseData+0x178>)
 800037e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(LOC_u8Result = 0 ; LOC_u8Result < (LOC_u8CharacterCount / 2) ; LOC_u8Result++  )
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	3301      	adds	r3, #1
 8000386:	73fb      	strb	r3, [r7, #15]
 8000388:	7b3b      	ldrb	r3, [r7, #12]
 800038a:	085b      	lsrs	r3, r3, #1
 800038c:	b2db      	uxtb	r3, r3
 800038e:	7bfa      	ldrb	r2, [r7, #15]
 8000390:	429a      	cmp	r2, r3
 8000392:	d3b0      	bcc.n	80002f6 <APARSE_voidParseData+0xba>
	}
	MFDI_voidFlashWrite(GLB_u32Address,GLB_u16Data,(LOC_u8CharacterCount / 2));
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <APARSE_voidParseData+0x174>)
 8000396:	6818      	ldr	r0, [r3, #0]
 8000398:	7b3b      	ldrb	r3, [r7, #12]
 800039a:	085b      	lsrs	r3, r3, #1
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	4904      	ldr	r1, [pc, #16]	; (80003b4 <APARSE_voidParseData+0x178>)
 80003a2:	f000 f873 	bl	800048c <MFDI_voidFlashWrite>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20000024 	.word	0x20000024

080003b8 <MFDI_voidSectorErase>:

/*#####################################################################################################*/
/*#####################################################################################################*/

void MFDI_voidSectorErase(u8 Copy_u8SectorNumber)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 80003c2:	bf00      	nop
 80003c4:	4b23      	ldr	r3, [pc, #140]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	0c1b      	lsrs	r3, r3, #16
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d0f8      	beq.n	80003c4 <MFDI_voidSectorErase+0xc>

	/*Unlock flash if lock bit = 1*/
	if(GET_BIT(MFDI->CR , 31) == 1)
 80003d2:	4b20      	ldr	r3, [pc, #128]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	0fdb      	lsrs	r3, r3, #31
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d105      	bne.n	80003ec <MFDI_voidSectorErase+0x34>
	{
		MFDI->KEYR = MFDI_KEY1 ;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 80003e2:	4a1d      	ldr	r2, [pc, #116]	; (8000458 <MFDI_voidSectorErase+0xa0>)
 80003e4:	605a      	str	r2, [r3, #4]
		MFDI->KEYR = MFDI_KEY2 ;
 80003e6:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 80003e8:	4a1c      	ldr	r2, [pc, #112]	; (800045c <MFDI_voidSectorErase+0xa4>)
 80003ea:	605a      	str	r2, [r3, #4]
	}

	/*Set Number Of Sectors  in CR */
	MFDI->CR &= 0XFFFFFF87 ;     /*clear bits from bit3 to bit6*/
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 80003ee:	691b      	ldr	r3, [r3, #16]
 80003f0:	4a18      	ldr	r2, [pc, #96]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 80003f2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80003f6:	6113      	str	r3, [r2, #16]
	MFDI->CR |= Copy_u8SectorNumber<<3  ;
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	79fa      	ldrb	r2, [r7, #7]
 80003fe:	00d2      	lsls	r2, r2, #3
 8000400:	4611      	mov	r1, r2
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 8000404:	430b      	orrs	r3, r1
 8000406:	6113      	str	r3, [r2, #16]

	/*Set SER bit --> to Activate Sector Erase*/
	SET_BIT(MFDI->CR,1) ;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	4a11      	ldr	r2, [pc, #68]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6113      	str	r3, [r2, #16]

	/*Set Starting Bit */
	SET_BIT(MFDI->CR,16) ;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 800041a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800041e:	6113      	str	r3, [r2, #16]

	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 8000420:	bf00      	nop
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	0c1b      	lsrs	r3, r3, #16
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	2b01      	cmp	r3, #1
 800042e:	d0f8      	beq.n	8000422 <MFDI_voidSectorErase+0x6a>

	/*Set EOP Bit in SR --> to Clear the Flag OF EOF */
	SET_BIT(MFDI->SR,0) ;
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	60d3      	str	r3, [r2, #12]

	/*Clear SER bit --> to Deactivate Sector Erase*/
	CLR_BIT(MFDI->CR,1) ;
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 800043e:	691b      	ldr	r3, [r3, #16]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <MFDI_voidSectorErase+0x9c>)
 8000442:	f023 0302 	bic.w	r3, r3, #2
 8000446:	6113      	str	r3, [r2, #16]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40023c00 	.word	0x40023c00
 8000458:	45670123 	.word	0x45670123
 800045c:	cdef89ab 	.word	0xcdef89ab

08000460 <MFDI_voidEraseAppArea>:


void MFDI_voidEraseAppArea(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
	u8 LOC_u8Iterator ;
	for( LOC_u8Iterator = 1 ; LOC_u8Iterator < 6 ; LOC_u8Iterator++)
 8000466:	2301      	movs	r3, #1
 8000468:	71fb      	strb	r3, [r7, #7]
 800046a:	e006      	b.n	800047a <MFDI_voidEraseAppArea+0x1a>
	{
		MFDI_voidSectorErase(LOC_u8Iterator) ;
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ffa2 	bl	80003b8 <MFDI_voidSectorErase>
	for( LOC_u8Iterator = 1 ; LOC_u8Iterator < 6 ; LOC_u8Iterator++)
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	3301      	adds	r3, #1
 8000478:	71fb      	strb	r3, [r7, #7]
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b05      	cmp	r3, #5
 800047e:	d9f5      	bls.n	800046c <MFDI_voidEraseAppArea+0xc>
	}
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MFDI_voidFlashWrite>:


void MFDI_voidFlashWrite(u32 Copy_u32Address ,u16* Copy_PtrData, u8 Copy_u8DataLength)
{
 800048c:	b480      	push	{r7}
 800048e:	b087      	sub	sp, #28
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	4613      	mov	r3, r2
 8000498:	71fb      	strb	r3, [r7, #7]
	u8 LOC_u8Iterator ;

	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 800049a:	bf00      	nop
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	0c1b      	lsrs	r3, r3, #16
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d0f8      	beq.n	800049c <MFDI_voidFlashWrite+0x10>

	/*Unlock flash if lock bit = 1*/
	if(GET_BIT(MFDI->CR , 31) == 1)
 80004aa:	4b27      	ldr	r3, [pc, #156]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004ac:	691b      	ldr	r3, [r3, #16]
 80004ae:	0fdb      	lsrs	r3, r3, #31
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d105      	bne.n	80004c4 <MFDI_voidFlashWrite+0x38>
	{
		MFDI->KEYR = MFDI_KEY1 ;
 80004b8:	4b23      	ldr	r3, [pc, #140]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004ba:	4a24      	ldr	r2, [pc, #144]	; (800054c <MFDI_voidFlashWrite+0xc0>)
 80004bc:	605a      	str	r2, [r3, #4]
		MFDI->KEYR = MFDI_KEY2 ;
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004c0:	4a23      	ldr	r2, [pc, #140]	; (8000550 <MFDI_voidFlashWrite+0xc4>)
 80004c2:	605a      	str	r2, [r3, #4]
	}

	/*Select PSize in CR --> Half Word*/
	MFDI->CR &= 0XFFFFFCFF ;     /*clear bits from bit8 to bit9  -->[1100]*/
 80004c4:	4b20      	ldr	r3, [pc, #128]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	4a1f      	ldr	r2, [pc, #124]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ce:	6113      	str	r3, [r2, #16]
	MFDI->CR |= WRITE_HALF_WORD<<8  ;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004d2:	691b      	ldr	r3, [r3, #16]
 80004d4:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004da:	6113      	str	r3, [r2, #16]

    for(LOC_u8Iterator = 0 ; LOC_u8Iterator < Copy_u8DataLength ; LOC_u8Iterator++ )
 80004dc:	2300      	movs	r3, #0
 80004de:	75fb      	strb	r3, [r7, #23]
 80004e0:	e026      	b.n	8000530 <MFDI_voidFlashWrite+0xa4>
    {
	/*Set PG Bit in CR --> to Activate Programming Flash*/
	SET_BIT(MFDI->CR,0) ;
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	4a18      	ldr	r2, [pc, #96]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6113      	str	r3, [r2, #16]

	/*Set Address to write to it
	 *
	 *((volatie u16 * )address) = Data[index] */

	*((volatile u16*)Copy_u32Address) = Copy_PtrData[LOC_u8Iterator]  ;
 80004ee:	7dfb      	ldrb	r3, [r7, #23]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	441a      	add	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	8812      	ldrh	r2, [r2, #0]
 80004fa:	801a      	strh	r2, [r3, #0]
	Copy_u32Address +=2 ;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3302      	adds	r3, #2
 8000500:	60fb      	str	r3, [r7, #12]

	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 8000502:	bf00      	nop
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	0c1b      	lsrs	r3, r3, #16
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	2b01      	cmp	r3, #1
 8000510:	d0f8      	beq.n	8000504 <MFDI_voidFlashWrite+0x78>
	/*Set EOP Bit in SR --> to Clear the Flag OF EOF */
	SET_BIT(MFDI->SR,0) ;
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	60d3      	str	r3, [r2, #12]
	/*Clear PG bit --> to Deactivate Programming*/
	CLR_BIT(MFDI->CR,0) ;
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <MFDI_voidFlashWrite+0xbc>)
 8000524:	f023 0301 	bic.w	r3, r3, #1
 8000528:	6113      	str	r3, [r2, #16]
    for(LOC_u8Iterator = 0 ; LOC_u8Iterator < Copy_u8DataLength ; LOC_u8Iterator++ )
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	3301      	adds	r3, #1
 800052e:	75fb      	strb	r3, [r7, #23]
 8000530:	7dfa      	ldrb	r2, [r7, #23]
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3d4      	bcc.n	80004e2 <MFDI_voidFlashWrite+0x56>
    }
}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	371c      	adds	r7, #28
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023c00 	.word	0x40023c00
 800054c:	45670123 	.word	0x45670123
 8000550:	cdef89ab 	.word	0xcdef89ab

08000554 <MGPIO_voidSetPinMode>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8Mod                         */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
 800055e:	460b      	mov	r3, r1
 8000560:	71bb      	strb	r3, [r7, #6]
 8000562:	4613      	mov	r3, r2
 8000564:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b05      	cmp	r3, #5
 800056a:	d857      	bhi.n	800061c <MGPIO_voidSetPinMode+0xc8>
 800056c:	a201      	add	r2, pc, #4	; (adr r2, 8000574 <MGPIO_voidSetPinMode+0x20>)
 800056e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000572:	bf00      	nop
 8000574:	0800058d 	.word	0x0800058d
 8000578:	080005a5 	.word	0x080005a5
 800057c:	080005bd 	.word	0x080005bd
 8000580:	080005d5 	.word	0x080005d5
 8000584:	080005ed 	.word	0x080005ed
 8000588:	08000605 	.word	0x08000605
	{
	case MGPIOA_PORT : MGPIOA->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <MGPIO_voidSetPinMode+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	7979      	ldrb	r1, [r7, #5]
 8000592:	79ba      	ldrb	r2, [r7, #6]
 8000594:	0052      	lsls	r2, r2, #1
 8000596:	fa01 f202 	lsl.w	r2, r1, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a23      	ldr	r2, [pc, #140]	; (800062c <MGPIO_voidSetPinMode+0xd8>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	e03c      	b.n	800061e <MGPIO_voidSetPinMode+0xca>
	case MGPIOB_PORT : MGPIOB->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MGPIO_voidSetPinMode+0xdc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	7979      	ldrb	r1, [r7, #5]
 80005aa:	79ba      	ldrb	r2, [r7, #6]
 80005ac:	0052      	lsls	r2, r2, #1
 80005ae:	fa01 f202 	lsl.w	r2, r1, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a1e      	ldr	r2, [pc, #120]	; (8000630 <MGPIO_voidSetPinMode+0xdc>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	e030      	b.n	800061e <MGPIO_voidSetPinMode+0xca>
	case MGPIOC_PORT : MGPIOC->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MGPIO_voidSetPinMode+0xe0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	7979      	ldrb	r1, [r7, #5]
 80005c2:	79ba      	ldrb	r2, [r7, #6]
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <MGPIO_voidSetPinMode+0xe0>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	e024      	b.n	800061e <MGPIO_voidSetPinMode+0xca>
	case MGPIOD_PORT : MGPIOD->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <MGPIO_voidSetPinMode+0xe4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	7979      	ldrb	r1, [r7, #5]
 80005da:	79ba      	ldrb	r2, [r7, #6]
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <MGPIO_voidSetPinMode+0xe4>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	e018      	b.n	800061e <MGPIO_voidSetPinMode+0xca>
	case MGPIOE_PORT : MGPIOE->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MGPIO_voidSetPinMode+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	7979      	ldrb	r1, [r7, #5]
 80005f2:	79ba      	ldrb	r2, [r7, #6]
 80005f4:	0052      	lsls	r2, r2, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MGPIO_voidSetPinMode+0xe8>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	e00c      	b.n	800061e <MGPIO_voidSetPinMode+0xca>
	case MGPIOH_PORT : MGPIOH->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MGPIO_voidSetPinMode+0xec>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	7979      	ldrb	r1, [r7, #5]
 800060a:	79ba      	ldrb	r2, [r7, #6]
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <MGPIO_voidSetPinMode+0xec>)
 8000616:	430b      	orrs	r3, r1
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	e000      	b.n	800061e <MGPIO_voidSetPinMode+0xca>

	default :  /*Error*/   break ;
 800061c:	bf00      	nop
	}	
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000
 8000630:	40020400 	.word	0x40020400
 8000634:	40020800 	.word	0x40020800
 8000638:	40020c00 	.word	0x40020c00
 800063c:	40021000 	.word	0x40021000
 8000640:	40021c00 	.word	0x40021c00

08000644 <MGPIO_voidSetOutputType>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8OutTypeMode                 */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetOutputType(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8OutTypeMode ) 
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	460b      	mov	r3, r1
 8000650:	71bb      	strb	r3, [r7, #6]
 8000652:	4613      	mov	r3, r2
 8000654:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b05      	cmp	r3, #5
 800065a:	d851      	bhi.n	8000700 <MGPIO_voidSetOutputType+0xbc>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <MGPIO_voidSetOutputType+0x20>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	0800067d 	.word	0x0800067d
 8000668:	08000693 	.word	0x08000693
 800066c:	080006a9 	.word	0x080006a9
 8000670:	080006bf 	.word	0x080006bf
 8000674:	080006d5 	.word	0x080006d5
 8000678:	080006eb 	.word	0x080006eb
	{
	case MGPIOA_PORT : MGPIOA->OTYPER |= (u32)(Copy_u8OutTypeMode << (Copy_u8PinNum ))  ; break ;
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <MGPIO_voidSetOutputType+0xcc>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	7979      	ldrb	r1, [r7, #5]
 8000682:	79ba      	ldrb	r2, [r7, #6]
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MGPIO_voidSetOutputType+0xcc>)
 800068c:	430b      	orrs	r3, r1
 800068e:	6053      	str	r3, [r2, #4]
 8000690:	e037      	b.n	8000702 <MGPIO_voidSetOutputType+0xbe>
	case MGPIOB_PORT : MGPIOB->OTYPER |= (u32)(Copy_u8OutTypeMode << (Copy_u8PinNum ))  ; break ;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MGPIO_voidSetOutputType+0xd0>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	7979      	ldrb	r1, [r7, #5]
 8000698:	79ba      	ldrb	r2, [r7, #6]
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	4611      	mov	r1, r2
 80006a0:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MGPIO_voidSetOutputType+0xd0>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6053      	str	r3, [r2, #4]
 80006a6:	e02c      	b.n	8000702 <MGPIO_voidSetOutputType+0xbe>
	case MGPIOC_PORT : MGPIOC->OTYPER |= (u32)(Copy_u8OutTypeMode << (Copy_u8PinNum ))  ; break ;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MGPIO_voidSetOutputType+0xd4>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	7979      	ldrb	r1, [r7, #5]
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	fa01 f202 	lsl.w	r2, r1, r2
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <MGPIO_voidSetOutputType+0xd4>)
 80006b8:	430b      	orrs	r3, r1
 80006ba:	6053      	str	r3, [r2, #4]
 80006bc:	e021      	b.n	8000702 <MGPIO_voidSetOutputType+0xbe>
	case MGPIOD_PORT : MGPIOD->OTYPER |= (u32)(Copy_u8OutTypeMode << (Copy_u8PinNum ))  ; break ;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MGPIO_voidSetOutputType+0xd8>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	7979      	ldrb	r1, [r7, #5]
 80006c4:	79ba      	ldrb	r2, [r7, #6]
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <MGPIO_voidSetOutputType+0xd8>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6053      	str	r3, [r2, #4]
 80006d2:	e016      	b.n	8000702 <MGPIO_voidSetOutputType+0xbe>
	case MGPIOE_PORT : MGPIOE->OTYPER |= (u32)(Copy_u8OutTypeMode << (Copy_u8PinNum ))  ; break ;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MGPIO_voidSetOutputType+0xdc>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	7979      	ldrb	r1, [r7, #5]
 80006da:	79ba      	ldrb	r2, [r7, #6]
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MGPIO_voidSetOutputType+0xdc>)
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6053      	str	r3, [r2, #4]
 80006e8:	e00b      	b.n	8000702 <MGPIO_voidSetOutputType+0xbe>
	case MGPIOH_PORT : MGPIOH->OTYPER |= (u32)(Copy_u8OutTypeMode << (Copy_u8PinNum ))  ; break ;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MGPIO_voidSetOutputType+0xe0>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	7979      	ldrb	r1, [r7, #5]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <MGPIO_voidSetOutputType+0xe0>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6053      	str	r3, [r2, #4]
 80006fe:	e000      	b.n	8000702 <MGPIO_voidSetOutputType+0xbe>

	default :  /*Error*/   break ;
 8000700:	bf00      	nop
	}	

}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40020000 	.word	0x40020000
 8000714:	40020400 	.word	0x40020400
 8000718:	40020800 	.word	0x40020800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40021000 	.word	0x40021000
 8000724:	40021c00 	.word	0x40021c00

08000728 <MGPIO_voidSetOutputSpeed>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8SpeedMode                   */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetOutputSpeed(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8SpeedMode  )
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	460b      	mov	r3, r1
 8000734:	71bb      	strb	r3, [r7, #6]
 8000736:	4613      	mov	r3, r2
 8000738:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortName)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b05      	cmp	r3, #5
 800073e:	d857      	bhi.n	80007f0 <MGPIO_voidSetOutputSpeed+0xc8>
 8000740:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <MGPIO_voidSetOutputSpeed+0x20>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	08000761 	.word	0x08000761
 800074c:	08000779 	.word	0x08000779
 8000750:	08000791 	.word	0x08000791
 8000754:	080007a9 	.word	0x080007a9
 8000758:	080007c1 	.word	0x080007c1
 800075c:	080007d9 	.word	0x080007d9
	{
	case MGPIOA_PORT : MGPIOA->OSPEEDR |= (u32)(Copy_u8SpeedMode << (2U * Copy_u8PinNum ))  ; break ;
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MGPIO_voidSetOutputSpeed+0xd8>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	7979      	ldrb	r1, [r7, #5]
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	0052      	lsls	r2, r2, #1
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	4611      	mov	r1, r2
 8000770:	4a23      	ldr	r2, [pc, #140]	; (8000800 <MGPIO_voidSetOutputSpeed+0xd8>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6093      	str	r3, [r2, #8]
 8000776:	e03c      	b.n	80007f2 <MGPIO_voidSetOutputSpeed+0xca>
	case MGPIOB_PORT : MGPIOB->OSPEEDR |= (u32)(Copy_u8SpeedMode << (2U * Copy_u8PinNum ))  ; break ;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MGPIO_voidSetOutputSpeed+0xdc>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	7979      	ldrb	r1, [r7, #5]
 800077e:	79ba      	ldrb	r2, [r7, #6]
 8000780:	0052      	lsls	r2, r2, #1
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <MGPIO_voidSetOutputSpeed+0xdc>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6093      	str	r3, [r2, #8]
 800078e:	e030      	b.n	80007f2 <MGPIO_voidSetOutputSpeed+0xca>
	case MGPIOC_PORT : MGPIOC->OSPEEDR |= (u32)(Copy_u8SpeedMode << (2U * Copy_u8PinNum ))  ; break ;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MGPIO_voidSetOutputSpeed+0xe0>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	7979      	ldrb	r1, [r7, #5]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	0052      	lsls	r2, r2, #1
 800079a:	fa01 f202 	lsl.w	r2, r1, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	4a19      	ldr	r2, [pc, #100]	; (8000808 <MGPIO_voidSetOutputSpeed+0xe0>)
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6093      	str	r3, [r2, #8]
 80007a6:	e024      	b.n	80007f2 <MGPIO_voidSetOutputSpeed+0xca>
	case MGPIOD_PORT : MGPIOD->OSPEEDR |= (u32)(Copy_u8SpeedMode << (2U * Copy_u8PinNum ))  ; break ;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <MGPIO_voidSetOutputSpeed+0xe4>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	7979      	ldrb	r1, [r7, #5]
 80007ae:	79ba      	ldrb	r2, [r7, #6]
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	fa01 f202 	lsl.w	r2, r1, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <MGPIO_voidSetOutputSpeed+0xe4>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6093      	str	r3, [r2, #8]
 80007be:	e018      	b.n	80007f2 <MGPIO_voidSetOutputSpeed+0xca>
	case MGPIOE_PORT : MGPIOE->OSPEEDR |= (u32)(Copy_u8SpeedMode << (2U * Copy_u8PinNum ))  ; break ;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MGPIO_voidSetOutputSpeed+0xe8>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	7979      	ldrb	r1, [r7, #5]
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	0052      	lsls	r2, r2, #1
 80007ca:	fa01 f202 	lsl.w	r2, r1, r2
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <MGPIO_voidSetOutputSpeed+0xe8>)
 80007d2:	430b      	orrs	r3, r1
 80007d4:	6093      	str	r3, [r2, #8]
 80007d6:	e00c      	b.n	80007f2 <MGPIO_voidSetOutputSpeed+0xca>
	case MGPIOH_PORT : MGPIOH->OSPEEDR |= (u32)(Copy_u8SpeedMode << (2U * Copy_u8PinNum ))  ; break ;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MGPIO_voidSetOutputSpeed+0xec>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	7979      	ldrb	r1, [r7, #5]
 80007de:	79ba      	ldrb	r2, [r7, #6]
 80007e0:	0052      	lsls	r2, r2, #1
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <MGPIO_voidSetOutputSpeed+0xec>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]
 80007ee:	e000      	b.n	80007f2 <MGPIO_voidSetOutputSpeed+0xca>

	default :  /*Error*/   break ;
 80007f0:	bf00      	nop
	}	
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021000 	.word	0x40021000
 8000814:	40021c00 	.word	0x40021c00

08000818 <MGPIO_voidSetPinValue>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum  , Copy_u8PinValue                     */                   
/* 3- Function Return      -> NO THING                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	460b      	mov	r3, r1
 8000824:	71bb      	strb	r3, [r7, #6]
 8000826:	4613      	mov	r3, r2
 8000828:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinValue == MGPIO_HIGH)
 800082a:	797b      	ldrb	r3, [r7, #5]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d14f      	bne.n	80008d0 <MGPIO_voidSetPinValue+0xb8>
	{
		switch(Copy_u8PortName)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b05      	cmp	r3, #5
 8000834:	f200 80a0 	bhi.w	8000978 <MGPIO_voidSetPinValue+0x160>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <MGPIO_voidSetPinValue+0x28>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000859 	.word	0x08000859
 8000844:	0800086d 	.word	0x0800086d
 8000848:	08000881 	.word	0x08000881
 800084c:	08000895 	.word	0x08000895
 8000850:	080008a9 	.word	0x080008a9
 8000854:	080008bd 	.word	0x080008bd
		{
		case MGPIOA_PORT : SET_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ; 
 8000858:	4b4c      	ldr	r3, [pc, #304]	; (800098c <MGPIO_voidSetPinValue+0x174>)
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	4949      	ldr	r1, [pc, #292]	; (800098c <MGPIO_voidSetPinValue+0x174>)
 8000866:	4313      	orrs	r3, r2
 8000868:	614b      	str	r3, [r1, #20]
 800086a:	e088      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOB_PORT : SET_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ; 
 800086c:	4b48      	ldr	r3, [pc, #288]	; (8000990 <MGPIO_voidSetPinValue+0x178>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	2101      	movs	r1, #1
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	4945      	ldr	r1, [pc, #276]	; (8000990 <MGPIO_voidSetPinValue+0x178>)
 800087a:	4313      	orrs	r3, r2
 800087c:	614b      	str	r3, [r1, #20]
 800087e:	e07e      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOC_PORT : SET_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 8000880:	4b44      	ldr	r3, [pc, #272]	; (8000994 <MGPIO_voidSetPinValue+0x17c>)
 8000882:	695a      	ldr	r2, [r3, #20]
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4941      	ldr	r1, [pc, #260]	; (8000994 <MGPIO_voidSetPinValue+0x17c>)
 800088e:	4313      	orrs	r3, r2
 8000890:	614b      	str	r3, [r1, #20]
 8000892:	e074      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOD_PORT : SET_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ; 
 8000894:	4b40      	ldr	r3, [pc, #256]	; (8000998 <MGPIO_voidSetPinValue+0x180>)
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	493d      	ldr	r1, [pc, #244]	; (8000998 <MGPIO_voidSetPinValue+0x180>)
 80008a2:	4313      	orrs	r3, r2
 80008a4:	614b      	str	r3, [r1, #20]
 80008a6:	e06a      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOE_PORT : SET_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ; 
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <MGPIO_voidSetPinValue+0x184>)
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	4939      	ldr	r1, [pc, #228]	; (800099c <MGPIO_voidSetPinValue+0x184>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	614b      	str	r3, [r1, #20]
 80008ba:	e060      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOH_PORT : SET_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ; 	
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <MGPIO_voidSetPinValue+0x188>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	2101      	movs	r1, #1
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	4935      	ldr	r1, [pc, #212]	; (80009a0 <MGPIO_voidSetPinValue+0x188>)
 80008ca:	4313      	orrs	r3, r2
 80008cc:	614b      	str	r3, [r1, #20]
 80008ce:	e056      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		default :  /*Error*/   break ; 
		}
	}
	else
	{
		switch(Copy_u8PortName)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	d852      	bhi.n	800097c <MGPIO_voidSetPinValue+0x164>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <MGPIO_voidSetPinValue+0xc4>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	080008f5 	.word	0x080008f5
 80008e0:	0800090b 	.word	0x0800090b
 80008e4:	08000921 	.word	0x08000921
 80008e8:	08000937 	.word	0x08000937
 80008ec:	0800094d 	.word	0x0800094d
 80008f0:	08000963 	.word	0x08000963
		{
		case MGPIOA_PORT : CLR_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ; 
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <MGPIO_voidSetPinValue+0x174>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	2101      	movs	r1, #1
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4922      	ldr	r1, [pc, #136]	; (800098c <MGPIO_voidSetPinValue+0x174>)
 8000904:	4013      	ands	r3, r2
 8000906:	614b      	str	r3, [r1, #20]
 8000908:	e039      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOB_PORT : CLR_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ; 
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MGPIO_voidSetPinValue+0x178>)
 800090c:	695a      	ldr	r2, [r3, #20]
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	491d      	ldr	r1, [pc, #116]	; (8000990 <MGPIO_voidSetPinValue+0x178>)
 800091a:	4013      	ands	r3, r2
 800091c:	614b      	str	r3, [r1, #20]
 800091e:	e02e      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOC_PORT : CLR_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MGPIO_voidSetPinValue+0x17c>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	2101      	movs	r1, #1
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	4919      	ldr	r1, [pc, #100]	; (8000994 <MGPIO_voidSetPinValue+0x17c>)
 8000930:	4013      	ands	r3, r2
 8000932:	614b      	str	r3, [r1, #20]
 8000934:	e023      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOD_PORT : CLR_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ; 
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MGPIO_voidSetPinValue+0x180>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	2101      	movs	r1, #1
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	4914      	ldr	r1, [pc, #80]	; (8000998 <MGPIO_voidSetPinValue+0x180>)
 8000946:	4013      	ands	r3, r2
 8000948:	614b      	str	r3, [r1, #20]
 800094a:	e018      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOE_PORT : CLR_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ; 
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MGPIO_voidSetPinValue+0x184>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	2101      	movs	r1, #1
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	4910      	ldr	r1, [pc, #64]	; (800099c <MGPIO_voidSetPinValue+0x184>)
 800095c:	4013      	ands	r3, r2
 800095e:	614b      	str	r3, [r1, #20]
 8000960:	e00d      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		case MGPIOH_PORT : CLR_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ; 	
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MGPIO_voidSetPinValue+0x188>)
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	2101      	movs	r1, #1
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	490b      	ldr	r1, [pc, #44]	; (80009a0 <MGPIO_voidSetPinValue+0x188>)
 8000972:	4013      	ands	r3, r2
 8000974:	614b      	str	r3, [r1, #20]
 8000976:	e002      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		default :  /*Error*/   break ; 
 8000978:	bf00      	nop
 800097a:	e000      	b.n	800097e <MGPIO_voidSetPinValue+0x166>
		default :  /*Error*/   break ; 
 800097c:	bf00      	nop
		}
	}
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40021000 	.word	0x40021000
 80009a0:	40021c00 	.word	0x40021c00

080009a4 <MGPIO_voidSetPinAltFun>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum  , Copy_u8AlFun                        */                   
/* 3- Function Return      -> NO THING                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinAltFun(u8 Copy_u8PortName ,u8 Copy_u8PinNum, u8 Copy_u8AlFun) 
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	460b      	mov	r3, r1
 80009b0:	71bb      	strb	r3, [r7, #6]
 80009b2:	4613      	mov	r3, r2
 80009b4:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	d82d      	bhi.n	8000a18 <MGPIO_voidSetPinAltFun+0x74>
	{
		switch(Copy_u8PortName)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d01e      	beq.n	8000a00 <MGPIO_voidSetPinAltFun+0x5c>
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	dc5c      	bgt.n	8000a80 <MGPIO_voidSetPinAltFun+0xdc>
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d002      	beq.n	80009d0 <MGPIO_voidSetPinAltFun+0x2c>
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d00c      	beq.n	80009e8 <MGPIO_voidSetPinAltFun+0x44>
		{
		case MGPIOA_PORT:MGPIOA->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
		case MGPIOB_PORT:MGPIOB->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
		case MGPIOC_PORT:MGPIOC->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
		default : break ;
 80009ce:	e057      	b.n	8000a80 <MGPIO_voidSetPinAltFun+0xdc>
		case MGPIOA_PORT:MGPIOA->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MGPIO_voidSetPinAltFun+0xf0>)
 80009d2:	6a1b      	ldr	r3, [r3, #32]
 80009d4:	7979      	ldrb	r1, [r7, #5]
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	4611      	mov	r1, r2
 80009e0:	4a2c      	ldr	r2, [pc, #176]	; (8000a94 <MGPIO_voidSetPinAltFun+0xf0>)
 80009e2:	430b      	orrs	r3, r1
 80009e4:	6213      	str	r3, [r2, #32]
 80009e6:	e04e      	b.n	8000a86 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOB_PORT:MGPIOB->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <MGPIO_voidSetPinAltFun+0xf4>)
 80009ea:	6a1b      	ldr	r3, [r3, #32]
 80009ec:	7979      	ldrb	r1, [r7, #5]
 80009ee:	79ba      	ldrb	r2, [r7, #6]
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <MGPIO_voidSetPinAltFun+0xf4>)
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6213      	str	r3, [r2, #32]
 80009fe:	e042      	b.n	8000a86 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOC_PORT:MGPIOC->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <MGPIO_voidSetPinAltFun+0xf8>)
 8000a02:	6a1b      	ldr	r3, [r3, #32]
 8000a04:	7979      	ldrb	r1, [r7, #5]
 8000a06:	79ba      	ldrb	r2, [r7, #6]
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <MGPIO_voidSetPinAltFun+0xf8>)
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6213      	str	r3, [r2, #32]
 8000a16:	e036      	b.n	8000a86 <MGPIO_voidSetPinAltFun+0xe2>
		}
	}
	else
	{
		switch(Copy_u8PortName)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d022      	beq.n	8000a64 <MGPIO_voidSetPinAltFun+0xc0>
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	dc30      	bgt.n	8000a84 <MGPIO_voidSetPinAltFun+0xe0>
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <MGPIO_voidSetPinAltFun+0x88>
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d00e      	beq.n	8000a48 <MGPIO_voidSetPinAltFun+0xa4>
		{
		case MGPIOA_PORT:MGPIOA->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
		case MGPIOB_PORT:MGPIOB->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
		case MGPIOC_PORT:MGPIOC->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
		default : break ;
 8000a2a:	e02b      	b.n	8000a84 <MGPIO_voidSetPinAltFun+0xe0>
		case MGPIOA_PORT:MGPIOA->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MGPIO_voidSetPinAltFun+0xf0>)
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	7979      	ldrb	r1, [r7, #5]
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	f002 0207 	and.w	r2, r2, #7
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <MGPIO_voidSetPinAltFun+0xf0>)
 8000a42:	430b      	orrs	r3, r1
 8000a44:	6253      	str	r3, [r2, #36]	; 0x24
 8000a46:	e01e      	b.n	8000a86 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOB_PORT:MGPIOB->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MGPIO_voidSetPinAltFun+0xf4>)
 8000a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4c:	7979      	ldrb	r1, [r7, #5]
 8000a4e:	79ba      	ldrb	r2, [r7, #6]
 8000a50:	f002 0207 	and.w	r2, r2, #7
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <MGPIO_voidSetPinAltFun+0xf4>)
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	6253      	str	r3, [r2, #36]	; 0x24
 8000a62:	e010      	b.n	8000a86 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOC_PORT:MGPIOC->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MGPIO_voidSetPinAltFun+0xf8>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	7979      	ldrb	r1, [r7, #5]
 8000a6a:	79ba      	ldrb	r2, [r7, #6]
 8000a6c:	f002 0207 	and.w	r2, r2, #7
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	fa01 f202 	lsl.w	r2, r1, r2
 8000a76:	4611      	mov	r1, r2
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <MGPIO_voidSetPinAltFun+0xf8>)
 8000a7a:	430b      	orrs	r3, r1
 8000a7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a7e:	e002      	b.n	8000a86 <MGPIO_voidSetPinAltFun+0xe2>
		default : break ;
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <MGPIO_voidSetPinAltFun+0xe2>
		default : break ;
 8000a84:	bf00      	nop
		}

	}
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <MRCC_voidEnablePeripheralClock>:
   @param[in]   Copy_uddtBusName  : The Bus of The Peripheral [AHB1 , AHB2 , APB1 ,APB2] Every one  Detect 
   Which REG to Choise Peripherial From It   
   @param[in]   Copy_u8PerNum  : The order of Peripheral On The Selected Register
 */
void MRCC_voidEnablePeripheralClock(BusName_t Copy_uddtBusName,u8 Copy_u8PerNum)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtBusName)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d862      	bhi.n	8000b7c <MRCC_voidEnablePeripheralClock+0xdc>
 8000ab6:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <MRCC_voidEnablePeripheralClock+0x1c>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000add 	.word	0x08000add
 8000ac0:	08000af1 	.word	0x08000af1
 8000ac4:	08000b05 	.word	0x08000b05
 8000ac8:	08000b19 	.word	0x08000b19
 8000acc:	08000b2d 	.word	0x08000b2d
 8000ad0:	08000b41 	.word	0x08000b41
 8000ad4:	08000b55 	.word	0x08000b55
 8000ad8:	08000b69 	.word	0x08000b69
	{  
	case AHB1  :    SET_BIT(RCC_AHB1ENR,Copy_u8PerNum) ; break ;
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <MRCC_voidEnablePeripheralClock+0xec>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4928      	ldr	r1, [pc, #160]	; (8000b8c <MRCC_voidEnablePeripheralClock+0xec>)
 8000aea:	4313      	orrs	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
 8000aee:	e046      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	case AHB2  :    SET_BIT(RCC_AHB2ENR,Copy_u8PerNum) ; break ;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <MRCC_voidEnablePeripheralClock+0xf0>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	4924      	ldr	r1, [pc, #144]	; (8000b90 <MRCC_voidEnablePeripheralClock+0xf0>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
 8000b02:	e03c      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	case APB1  :    SET_BIT(RCC_APB1ENR,Copy_u8PerNum) ; break ;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MRCC_voidEnablePeripheralClock+0xf4>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b10:	4920      	ldr	r1, [pc, #128]	; (8000b94 <MRCC_voidEnablePeripheralClock+0xf4>)
 8000b12:	4313      	orrs	r3, r2
 8000b14:	600b      	str	r3, [r1, #0]
 8000b16:	e032      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	case APB2  :    SET_BIT(RCC_APB2ENR,Copy_u8PerNum) ; break ;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MRCC_voidEnablePeripheralClock+0xf8>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	491c      	ldr	r1, [pc, #112]	; (8000b98 <MRCC_voidEnablePeripheralClock+0xf8>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	600b      	str	r3, [r1, #0]
 8000b2a:	e028      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	case AHB1LP:	SET_BIT(RCC_AHB1LPENR,Copy_u8PerNum);   break;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MRCC_voidEnablePeripheralClock+0xfc>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	2101      	movs	r1, #1
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	4918      	ldr	r1, [pc, #96]	; (8000b9c <MRCC_voidEnablePeripheralClock+0xfc>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
 8000b3e:	e01e      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	case AHB2LP:	SET_BIT(RCC_AHB2LPENR,Copy_u8PerNum);   break;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MRCC_voidEnablePeripheralClock+0x100>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	2101      	movs	r1, #1
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	4914      	ldr	r1, [pc, #80]	; (8000ba0 <MRCC_voidEnablePeripheralClock+0x100>)
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	600b      	str	r3, [r1, #0]
 8000b52:	e014      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	case APB1LP:	SET_BIT(RCC_APB1LPENR,Copy_u8PerNum);   break;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MRCC_voidEnablePeripheralClock+0x104>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	4910      	ldr	r1, [pc, #64]	; (8000ba4 <MRCC_voidEnablePeripheralClock+0x104>)
 8000b62:	4313      	orrs	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]
 8000b66:	e00a      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	case APB2LP:	SET_BIT(RCC_APB2LPENR,Copy_u8PerNum);   break;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MRCC_voidEnablePeripheralClock+0x108>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <MRCC_voidEnablePeripheralClock+0x108>)
 8000b76:	4313      	orrs	r3, r2
 8000b78:	600b      	str	r3, [r1, #0]
 8000b7a:	e000      	b.n	8000b7e <MRCC_voidEnablePeripheralClock+0xde>
	default    : /* ERROR*/         break ;
 8000b7c:	bf00      	nop
	}

}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023830 	.word	0x40023830
 8000b90:	40023834 	.word	0x40023834
 8000b94:	40023840 	.word	0x40023840
 8000b98:	40023844 	.word	0x40023844
 8000b9c:	40023850 	.word	0x40023850
 8000ba0:	40023854 	.word	0x40023854
 8000ba4:	40023860 	.word	0x40023860
 8000ba8:	40023864 	.word	0x40023864

08000bac <MRCC_voidInitSystemClk>:
/*
   @fu MRCC_voidInitSystemClk 
   @brief   This Function used To Initializaion for System clock   
 */
void MRCC_voidInitSystemClk(void)
{   
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	/***************HSI************/
#if MRCC_CLKSRC == HSI
	/*1- Enable HSI */
	SET_BIT(RCC_CR,0U);
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MRCC_voidInitSystemClk+0x34>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <MRCC_voidInitSystemClk+0x34>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]
	/*2-Clk System -->HSI */
	CLR_BIT(RCC_CFGR,0U);
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MRCC_voidInitSystemClk+0x38>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <MRCC_voidInitSystemClk+0x38>)
 8000bc2:	f023 0301 	bic.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,1U);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MRCC_voidInitSystemClk+0x38>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <MRCC_voidInitSystemClk+0x38>)
 8000bce:	f023 0302 	bic.w	r3, r3, #2
 8000bd2:	6013      	str	r3, [r2, #0]
#error "Invalid Option For Clock Source  ..... "
#endif
	/*#####################################################################*/
	/*                  THE END OF PROGRAM FILE                      */
	/*#####################################################################*/
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40023808 	.word	0x40023808

08000be8 <MSTK_voidInit>:
/*******************************************************************************************************/



void MSTK_voidInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

	/* Disable Systick Interrupt - Stop Systick - CLOCK Source = AHB / 8 */
	MSTK->CTRL = 0x00000000 ;   //Clr_ALL_BITS(MSTK->CTRL) ;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <MSTK_voidInit+0x14>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]


}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <MSTK_u8ReadFlag>:
/* 1- Function Description ->                                                                          */
/* 2- Function Input                                                                                   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
u8 MSTK_u8ReadFlag(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	return (GET_BIT(MSTK->CTRL , 16)) ;
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <MSTK_u8ReadFlag+0x1c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	0c1b      	lsrs	r3, r3, #16
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

	volatile u8 LOC_u8Temp = 0 ;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71fb      	strb	r3, [r7, #7]
  /*Call Back Notification*/
	MSTK_CallBack() ;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Handler+0x20>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4798      	blx	r3

	/*Clear Flag */
	LOC_u8Temp  = MSTK_u8ReadFlag()  ;
 8000c30:	f7ff ffe6 	bl	8000c00 <MSTK_u8ReadFlag>
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]

}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000ec 	.word	0x200000ec

08000c44 <MSTK_voidSetIntervalSingle>:


void MSTK_voidSetIntervalSingle(u32 Copy_u32Us, void (*CopyPtr)(void))
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  /*Disable Timer*/
	MSTK->CTRL = 0x00000000 ;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MSTK_voidSetIntervalSingle+0x48>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

	/*Load ticks to load register --> 1 tick = 0.5 micro sec*/
	MSTK->LOAD = 2 * Copy_u32Us ;
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <MSTK_voidSetIntervalSingle+0x48>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	6053      	str	r3, [r2, #4]

	MSTK->VAL = 0 ;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MSTK_voidSetIntervalSingle+0x48>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]

	/*Start Timer*/
	SET_BIT(MSTK->CTRL,0) ;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MSTK_voidSetIntervalSingle+0x48>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <MSTK_voidSetIntervalSingle+0x48>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]

	/*Save CallBack*/
	MSTK_CallBack  = CopyPtr ;
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <MSTK_voidSetIntervalSingle+0x4c>)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6013      	str	r3, [r2, #0]


	/*Enable Interrupt*/
	SET_BIT(MSTK->CTRL,1) ;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MSTK_voidSetIntervalSingle+0x48>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <MSTK_voidSetIntervalSingle+0x48>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6013      	str	r3, [r2, #0]

}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e010 	.word	0xe000e010
 8000c90:	200000ec 	.word	0x200000ec

08000c94 <MUSART_voidInit>:

static void(*MUSART_CALLPTR)(void)   = NULL ;


void MUSART_voidInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

	/*Set Boaud Rate*/
	MUSART1->BRR = 0x00000683 ;   //baudRate 9600 bps
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000c9a:	f240 6283 	movw	r2, #1667	; 0x683
 8000c9e:	609a      	str	r2, [r3, #8]
	/*OverSampling 16 Sample*/
	MUSART1->CR1.OVER8 = 0 ;   //BitField
 8000ca0:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000ca2:	68d3      	ldr	r3, [r2, #12]
 8000ca4:	f36f 33cf 	bfc	r3, #15, #1
 8000ca8:	60d3      	str	r3, [r2, #12]
	/*8 Bit Word size*/
	MUSART1->CR1.M = 0 ;
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000cac:	68d3      	ldr	r3, [r2, #12]
 8000cae:	f36f 330c 	bfc	r3, #12, #1
 8000cb2:	60d3      	str	r3, [r2, #12]
	/*Disable Parity*/
	MUSART1->CR1.PCE = 	0 ;
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000cb6:	68d3      	ldr	r3, [r2, #12]
 8000cb8:	f36f 238a 	bfc	r3, #10, #1
 8000cbc:	60d3      	str	r3, [r2, #12]
	/*one Stop Bit*/
	CLR_BIT(MUSART1->CR2,12);
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cc8:	6113      	str	r3, [r2, #16]
	CLR_BIT(MUSART1->CR2,13);
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000cd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cd4:	6113      	str	r3, [r2, #16]
	/*Enable Trasmitter */
	MUSART1->CR1.TE = 1 ;
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000cd8:	68d3      	ldr	r3, [r2, #12]
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	60d3      	str	r3, [r2, #12]
	/*Enable Receiver*/
	MUSART1->CR1.RE = 1 ;
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000ce2:	68d3      	ldr	r3, [r2, #12]
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	60d3      	str	r3, [r2, #12]
	/*Receive interrupt  Enable*/
	MUSART1->CR1.RXNEIE = 1 ;
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <MUSART_voidInit+0x6c>)
 8000cec:	68d3      	ldr	r3, [r2, #12]
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40011000 	.word	0x40011000

08000d04 <MUSART_voidSendData>:

void MUSART_voidSendData(u8* copy_u8Data,u8 Copy_u8Len)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	70fb      	strb	r3, [r7, #3]
   for(u8 Copy_u8Iterator = 0 ; Copy_u8Iterator < Copy_u8Len ; Copy_u8Iterator++ )
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	e010      	b.n	8000d38 <MUSART_voidSendData+0x34>
   {
	   /*Send Byte*/
	   MUSART1->DR = copy_u8Data[Copy_u8Iterator] ;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MUSART_voidSendData+0x4c>)
 8000d20:	605a      	str	r2, [r3, #4]
	   /*wait until data transfer is complete from Transmitter buffer register to shift Transmitter Register*/
	   while(GET_BIT(MUSART1->SR,7) == 0) ;
 8000d22:	bf00      	nop
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MUSART_voidSendData+0x4c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	09db      	lsrs	r3, r3, #7
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f8      	beq.n	8000d24 <MUSART_voidSendData+0x20>
   for(u8 Copy_u8Iterator = 0 ; Copy_u8Iterator < Copy_u8Len ; Copy_u8Iterator++ )
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	3301      	adds	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3ea      	bcc.n	8000d16 <MUSART_voidSendData+0x12>
   }

}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40011000 	.word	0x40011000

08000d54 <MUSART_u8ReadDataSynch>:
	 return (u8) MUSART1->DR  ;
}


u8 MUSART_u8ReadDataSynch(u8 *Copy_u8DataCome)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  u8 LOC_u8Status = 1 ;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
  if(GET_BIT(MUSART1->SR,5) == 1)
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MUSART_u8ReadDataSynch+0x38>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d105      	bne.n	8000d7a <MUSART_u8ReadDataSynch+0x26>
  {
	  *Copy_u8DataCome = MUSART1->DR  ;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MUSART_u8ReadDataSynch+0x38>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	e001      	b.n	8000d7e <MUSART_u8ReadDataSynch+0x2a>
  }
  else
  {
	  LOC_u8Status = 0 ;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  }

return  LOC_u8Status ;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40011000 	.word	0x40011000

08000d90 <MUSART_voidEnable>:

void MUSART_voidEnable(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /*UART Enable*/
  MUSART1->CR1.UE =  1 ;
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <MUSART_voidEnable+0x18>)
 8000d96:	68d3      	ldr	r3, [r2, #12]
 8000d98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d9c:	60d3      	str	r3, [r2, #12]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40011000 	.word	0x40011000

08000dac <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	MUSART_CALLPTR() ;
 8000db0:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <USART1_IRQHandler+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4798      	blx	r3
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000f0 	.word	0x200000f0

08000dc0 <App_voidTest>:
typedef void (*APP_Call)(void) ;

APP_Call Add_To_Call = 0 ; /*void (*Add_To_Call)(void)*/

void App_voidTest(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

	TimeOutFlag = 1 ;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <App_voidTest+0x2c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]

	/*Move Vector Table*/
#define SCB_VTOR *((volatile u32*)0xE000ED08)

	SCB_VTOR = 0x08004000 ; //Starting of Sector 1 [Application]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <App_voidTest+0x30>)
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <App_voidTest+0x34>)
 8000dce:	601a      	str	r2, [r3, #0]

	/*Set Address to call with Reset Handeler_ISR [startup code of Application]*/
	Add_To_Call = *(APP_Call*) 0x08004004 ;//0x08004004
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <App_voidTest+0x38>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <App_voidTest+0x3c>)
 8000dd6:	6013      	str	r3, [r2, #0]

	Add_To_Call() ; //jump Reset handler [startup code]
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <App_voidTest+0x3c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4798      	blx	r3
	MGPIO_voidSetPinValue(MGPIOA_PORT,MGPIO_PIN0,MGPIO_HIGH) ;
 8000dde:	2201      	movs	r2, #1
 8000de0:	2100      	movs	r1, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fd18 	bl	8000818 <MGPIO_voidSetPinValue>

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200000f4 	.word	0x200000f4
 8000df0:	e000ed08 	.word	0xe000ed08
 8000df4:	08004000 	.word	0x08004000
 8000df8:	08004004 	.word	0x08004004
 8000dfc:	20000160 	.word	0x20000160

08000e00 <main>:

void main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

	u8 LOC_u8RecStatus = 0 ;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
	/*Step 1 : System Clock is 16 MHz From HSI*/
	MRCC_voidInitSystemClk();
 8000e0a:	f7ff fecf 	bl	8000bac <MRCC_voidInitSystemClk>

	/*Step 2 : Enable GPIO Peripherial Clock For Port A*/
	MRCC_voidEnablePeripheralClock(AHB1,MRCC_PERIPHERAL_EN_GPIOA);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fe45 	bl	8000aa0 <MRCC_voidEnablePeripheralClock>

	/*Step 3 : Enable USART1 Peripherial Clock */
	MRCC_voidEnablePeripheralClock(APB2,MRCC_PERIPHERAL_EN_USART1);
 8000e16:	2104      	movs	r1, #4
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f7ff fe41 	bl	8000aa0 <MRCC_voidEnablePeripheralClock>

	/*Step 4 : Enable FDI Peripherial Clock */
	MRCC_voidEnablePeripheralClock(AHB1LP,MRCC_PERIPHERAL_EN_FDI);
 8000e1e:	210f      	movs	r1, #15
 8000e20:	2004      	movs	r0, #4
 8000e22:	f7ff fe3d 	bl	8000aa0 <MRCC_voidEnablePeripheralClock>

	/*Step 5 : Set Pin Direction ->> Output*/
	MGPIO_voidSetPinMode(MGPIOA_PORT,MGPIO_PIN0,MGPIO_MODE_OUTPUT) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fb92 	bl	8000554 <MGPIO_voidSetPinMode>
	/*Set Pin Speed*/
	MGPIO_voidSetOutputSpeed(MGPIOA_PORT,MGPIO_PIN0,MGPIO_OUTPUT_SPEED_MEDUIM) ;
 8000e30:	2201      	movs	r2, #1
 8000e32:	2100      	movs	r1, #0
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff fc77 	bl	8000728 <MGPIO_voidSetOutputSpeed>
	/*Pull Output Type*/
	MGPIO_voidSetOutputType(MGPIOA_PORT,MGPIO_PIN0,MGPIO_OUTPUT_TYPE_PUSH_PULL) ;
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fc00 	bl	8000644 <MGPIO_voidSetOutputType>

	/*Step 6 : indicate to i am in Boot loader */
	MGPIO_voidSetPinValue(MGPIOA_PORT,MGPIO_PIN0,MGPIO_HIGH) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	2100      	movs	r1, #0
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fce5 	bl	8000818 <MGPIO_voidSetPinValue>


	/*Step 5 : Set Pin Mode For Pins 9 , 10 -> Alternative Function */
	MGPIO_voidSetPinMode(MGPIOA_PORT,MGPIO_PIN9,MGPIO_MODE_ALTF) ;    //TX-> USART1
 8000e4e:	2202      	movs	r2, #2
 8000e50:	2109      	movs	r1, #9
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fb7e 	bl	8000554 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MGPIOA_PORT,MGPIO_PIN10,MGPIO_MODE_ALTF) ;   //RX-> USART1
 8000e58:	2202      	movs	r2, #2
 8000e5a:	210a      	movs	r1, #10
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fb79 	bl	8000554 <MGPIO_voidSetPinMode>

	/*Step 6 : Set Pin Alternative function For Pins 9 , 10  */
	MGPIO_voidSetPinAltFun(MGPIOA_PORT,MGPIO_PIN9,7) ;                //TX-> USART1
 8000e62:	2207      	movs	r2, #7
 8000e64:	2109      	movs	r1, #9
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fd9c 	bl	80009a4 <MGPIO_voidSetPinAltFun>
	MGPIO_voidSetPinAltFun(MGPIOA_PORT,MGPIO_PIN10,7) ;               //RX-> USART1
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	210a      	movs	r1, #10
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fd97 	bl	80009a4 <MGPIO_voidSetPinAltFun>
	/*Step 8 : MUSART Initialization*/
	MUSART_voidInit() ; /*9600bps , 1 stop bits  , no parity , 8  bit data*/
 8000e76:	f7ff ff0d 	bl	8000c94 <MUSART_voidInit>

	/*Step 9 : Enable MUSART */
	MUSART_voidEnable() ;
 8000e7a:	f7ff ff89 	bl	8000d90 <MUSART_voidEnable>


	/*Step 10: init Systick*/
	//MSTK_voidInit() ; /*disable STK , Interrupt , Tick = 0.5 Micro second --> HSI/8 --> 2MHz*/

	MSTK_voidSetIntervalSingle(300000000,App_voidTest) ;
 8000e7e:	4928      	ldr	r1, [pc, #160]	; (8000f20 <main+0x120>)
 8000e80:	4828      	ldr	r0, [pc, #160]	; (8000f24 <main+0x124>)
 8000e82:	f7ff fedf 	bl	8000c44 <MSTK_voidSetIntervalSingle>

	/* Loop forever */
	while(TimeOutFlag == 0)
 8000e86:	e040      	b.n	8000f0a <main+0x10a>
	{
		LOC_u8RecStatus = MUSART_u8ReadDataSynch(&ReceiveBuffer[u8RecCounter]) ;
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <main+0x128>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <main+0x12c>)
 8000e92:	4413      	add	r3, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <MUSART_u8ReadDataSynch>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
		if(LOC_u8RecStatus == 1)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d132      	bne.n	8000f0a <main+0x10a>
		{
			/*Stop Timer Because Application Code In Processing*/
			MSTK_voidInit(); //Stop Timer
 8000ea4:	f7ff fea0 	bl	8000be8 <MSTK_voidInit>
			/*indicate The end Of the Record*/
			if(ReceiveBuffer[u8RecCounter] == '\0')
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <main+0x128>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <main+0x12c>)
 8000eb2:	5c9b      	ldrb	r3, [r3, r2]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d114      	bne.n	8000ee4 <main+0xe4>
			{
				if(u8WriteReq == 1)
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <main+0x130>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d104      	bne.n	8000ece <main+0xce>
				{
					/*Erase The Application Code*/
					MFDI_voidEraseAppArea() ;
 8000ec4:	f7ff facc 	bl	8000460 <MFDI_voidEraseAppArea>
					u8WriteReq = 0 ; // reset all the App code secotrs in one time
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <main+0x130>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
				}
				/*Parse The Record and Write it to flash*/
				APARSER_voidParseRecord(ReceiveBuffer) ;
 8000ece:	4817      	ldr	r0, [pc, #92]	; (8000f2c <main+0x12c>)
 8000ed0:	f7ff f99b 	bl	800020a <APARSER_voidParseRecord>
				/*Send ok to tool to send the next Record */
				MUSART_voidSendData((u8*)"OK",2) ;
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <main+0x134>)
 8000ed8:	f7ff ff14 	bl	8000d04 <MUSART_voidSendData>
				/*Reset Buffer Counter*/
				u8RecCounter = 0 ;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <main+0x128>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e006      	b.n	8000ef2 <main+0xf2>
			}
			else
			{
				u8RecCounter++ ;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <main+0x128>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <main+0x128>)
 8000ef0:	701a      	strb	r2, [r3, #0]
			}

			/*End Of File*/
			if(ReceiveBuffer[8] == '1')
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <main+0x12c>)
 8000ef4:	7a1b      	ldrb	r3, [r3, #8]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b31      	cmp	r3, #49	; 0x31
 8000efa:	d106      	bne.n	8000f0a <main+0x10a>
			{
				/*Wait 1 sec then jump to Application*/
				//MSTK_voidSetIntervalSingle(1000000,App_voidTest) ;
				/*Indicate to Successful Flashing*/
				MGPIO_voidSetPinValue(MGPIOA_PORT,MGPIO_PIN0,MGPIO_LOW) ;
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff fc89 	bl	8000818 <MGPIO_voidSetPinValue>
				App_voidTest();
 8000f06:	f7ff ff5b 	bl	8000dc0 <App_voidTest>
	while(TimeOutFlag == 0)
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <main+0x138>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0b9      	beq.n	8000e88 <main+0x88>
		}


	}

}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	08000dc1 	.word	0x08000dc1
 8000f24:	11e1a300 	.word	0x11e1a300
 8000f28:	2000015c 	.word	0x2000015c
 8000f2c:	200000f8 	.word	0x200000f8
 8000f30:	20000004 	.word	0x20000004
 8000f34:	08000ff0 	.word	0x08000ff0
 8000f38:	200000f4 	.word	0x200000f4

08000f3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopForever+0xe>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopForever+0x16>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6a:	f000 f811 	bl	8000f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f6e:	f7ff ff47 	bl	8000e00 <main>

08000f72 <LoopForever>:

LoopForever:
    b LoopForever
 8000f72:	e7fe      	b.n	8000f72 <LoopForever>
  ldr   r0, =_estack
 8000f74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000f80:	08000ffc 	.word	0x08000ffc
  ldr r2, =_sbss
 8000f84:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000f88:	20000164 	.word	0x20000164

08000f8c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <__libc_init_array>:
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	4d0d      	ldr	r5, [pc, #52]	; (8000fc8 <__libc_init_array+0x38>)
 8000f94:	4c0d      	ldr	r4, [pc, #52]	; (8000fcc <__libc_init_array+0x3c>)
 8000f96:	1b64      	subs	r4, r4, r5
 8000f98:	10a4      	asrs	r4, r4, #2
 8000f9a:	2600      	movs	r6, #0
 8000f9c:	42a6      	cmp	r6, r4
 8000f9e:	d109      	bne.n	8000fb4 <__libc_init_array+0x24>
 8000fa0:	4d0b      	ldr	r5, [pc, #44]	; (8000fd0 <__libc_init_array+0x40>)
 8000fa2:	4c0c      	ldr	r4, [pc, #48]	; (8000fd4 <__libc_init_array+0x44>)
 8000fa4:	f000 f818 	bl	8000fd8 <_init>
 8000fa8:	1b64      	subs	r4, r4, r5
 8000faa:	10a4      	asrs	r4, r4, #2
 8000fac:	2600      	movs	r6, #0
 8000fae:	42a6      	cmp	r6, r4
 8000fb0:	d105      	bne.n	8000fbe <__libc_init_array+0x2e>
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb8:	4798      	blx	r3
 8000fba:	3601      	adds	r6, #1
 8000fbc:	e7ee      	b.n	8000f9c <__libc_init_array+0xc>
 8000fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fc2:	4798      	blx	r3
 8000fc4:	3601      	adds	r6, #1
 8000fc6:	e7f2      	b.n	8000fae <__libc_init_array+0x1e>
 8000fc8:	08000ff4 	.word	0x08000ff4
 8000fcc:	08000ff4 	.word	0x08000ff4
 8000fd0:	08000ff4 	.word	0x08000ff4
 8000fd4:	08000ff8 	.word	0x08000ff8

08000fd8 <_init>:
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	bf00      	nop
 8000fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fde:	bc08      	pop	{r3}
 8000fe0:	469e      	mov	lr, r3
 8000fe2:	4770      	bx	lr

08000fe4 <_fini>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	bf00      	nop
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr
