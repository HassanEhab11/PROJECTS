
Application_MC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000970  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b04  08000b04  00021708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b04  08000b04  00021708  2**0
                  CONTENTS
  4 .ARM          00000000  08000b04  08000b04  00021708  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b04  08000b04  00021708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b04  08000b04  00010b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b08  08000b08  00010b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001708  20000000  08000b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20001708  08002214  00021708  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001770  08002214  00021770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021708  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016f5  00000000  00000000  00021738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000836  00000000  00000000  00022e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00023668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000230  00000000  00000000  00023910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011bb  00000000  00000000  00023b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000111a  00000000  00000000  00024cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005913  00000000  00000000  00025e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002b728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008ac  00000000  00000000  0002b778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20001708 	.word	0x20001708
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000aec 	.word	0x08000aec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000170c 	.word	0x2000170c
 80001d0:	08000aec 	.word	0x08000aec

080001d4 <MEXTI_vEnableLine>:
#define EXTI_NUM   16

static void (*EXTIx_CALLBACK[EXTI_NUM])(void) = {NULL};

void MEXTI_vEnableLine(EXTI_LINES_e Copy_eLineNUM)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(MEXTI->IMR, Copy_eLineNUM);
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <MEXTI_vEnableLine+0x28>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <MEXTI_vEnableLine+0x28>)
 80001ec:	4313      	orrs	r3, r2
 80001ee:	600b      	str	r3, [r1, #0]

}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	40013c00 	.word	0x40013c00

08000200 <MEXTI_vEventTriggerType>:
	CLR_BIT(MEXTI->IMR, Copy_eLineNUM);

}

void MEXTI_vEventTriggerType(EXTI_LINES_e Copy_eLineNUM , TRIGGER_Type_e Copy_eEventType  )
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_eEventType)
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	2b02      	cmp	r3, #2
 8000214:	d02e      	beq.n	8000274 <MEXTI_vEventTriggerType+0x74>
 8000216:	2b02      	cmp	r3, #2
 8000218:	dc3f      	bgt.n	800029a <MEXTI_vEventTriggerType+0x9a>
 800021a:	2b00      	cmp	r3, #0
 800021c:	d002      	beq.n	8000224 <MEXTI_vEventTriggerType+0x24>
 800021e:	2b01      	cmp	r3, #1
 8000220:	d014      	beq.n	800024c <MEXTI_vEventTriggerType+0x4c>
		SET_BIT(MEXTI->RTSR, Copy_eLineNUM);
		SET_BIT(MEXTI->FTSR, Copy_eLineNUM);
		break;

	}
}
 8000222:	e03a      	b.n	800029a <MEXTI_vEventTriggerType+0x9a>
		SET_BIT(MEXTI->RTSR, Copy_eLineNUM);
 8000224:	4b20      	ldr	r3, [pc, #128]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000226:	689a      	ldr	r2, [r3, #8]
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	2101      	movs	r1, #1
 800022c:	fa01 f303 	lsl.w	r3, r1, r3
 8000230:	491d      	ldr	r1, [pc, #116]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000232:	4313      	orrs	r3, r2
 8000234:	608b      	str	r3, [r1, #8]
		CLR_BIT(MEXTI->FTSR, Copy_eLineNUM);
 8000236:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000238:	68da      	ldr	r2, [r3, #12]
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	2101      	movs	r1, #1
 800023e:	fa01 f303 	lsl.w	r3, r1, r3
 8000242:	43db      	mvns	r3, r3
 8000244:	4918      	ldr	r1, [pc, #96]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000246:	4013      	ands	r3, r2
 8000248:	60cb      	str	r3, [r1, #12]
		break;
 800024a:	e026      	b.n	800029a <MEXTI_vEventTriggerType+0x9a>
		SET_BIT(MEXTI->FTSR, Copy_eLineNUM);
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 800024e:	68da      	ldr	r2, [r3, #12]
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f303 	lsl.w	r3, r1, r3
 8000258:	4913      	ldr	r1, [pc, #76]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 800025a:	4313      	orrs	r3, r2
 800025c:	60cb      	str	r3, [r1, #12]
		CLR_BIT(MEXTI->RTSR, Copy_eLineNUM);
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2101      	movs	r1, #1
 8000266:	fa01 f303 	lsl.w	r3, r1, r3
 800026a:	43db      	mvns	r3, r3
 800026c:	490e      	ldr	r1, [pc, #56]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 800026e:	4013      	ands	r3, r2
 8000270:	608b      	str	r3, [r1, #8]
		break;
 8000272:	e012      	b.n	800029a <MEXTI_vEventTriggerType+0x9a>
		SET_BIT(MEXTI->RTSR, Copy_eLineNUM);
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000276:	689a      	ldr	r2, [r3, #8]
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2101      	movs	r1, #1
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	4909      	ldr	r1, [pc, #36]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000282:	4313      	orrs	r3, r2
 8000284:	608b      	str	r3, [r1, #8]
		SET_BIT(MEXTI->FTSR, Copy_eLineNUM);
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000288:	68da      	ldr	r2, [r3, #12]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2101      	movs	r1, #1
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	4905      	ldr	r1, [pc, #20]	; (80002a8 <MEXTI_vEventTriggerType+0xa8>)
 8000294:	4313      	orrs	r3, r2
 8000296:	60cb      	str	r3, [r1, #12]
		break;
 8000298:	bf00      	nop
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40013c00 	.word	0x40013c00

080002ac <MEXTI_vSelectPort>:
{
	return(GET_BIT( MEXTI -> PR,Copy_eLineNUM));
}

void MEXTI_vSelectPort(Port_t Copy_ePortNum,  EXTI_LINES_e Copy_eLineNUM)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	460a      	mov	r2, r1
 80002b6:	71fb      	strb	r3, [r7, #7]
 80002b8:	4613      	mov	r3, r2
 80002ba:	71bb      	strb	r3, [r7, #6]
	if(Copy_eLineNUM <= 3)
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	2b03      	cmp	r3, #3
 80002c0:	d81b      	bhi.n	80002fa <MEXTI_vSelectPort+0x4e>
	{
		MSYSCFG->EXTICR1 &= ~(0b1111 << (4 * (Copy_eLineNUM % 4)));
 80002c2:	4b3f      	ldr	r3, [pc, #252]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	f002 0203 	and.w	r2, r2, #3
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	210f      	movs	r1, #15
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a39      	ldr	r2, [pc, #228]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 80002da:	400b      	ands	r3, r1
 80002dc:	6093      	str	r3, [r2, #8]
		MSYSCFG->EXTICR1 |= (Copy_ePortNum << (4 * (Copy_eLineNUM % 4)));
 80002de:	4b38      	ldr	r3, [pc, #224]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	79f9      	ldrb	r1, [r7, #7]
 80002e4:	79ba      	ldrb	r2, [r7, #6]
 80002e6:	f002 0203 	and.w	r2, r2, #3
 80002ea:	0092      	lsls	r2, r2, #2
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	4611      	mov	r1, r2
 80002f2:	4a33      	ldr	r2, [pc, #204]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 80002f4:	430b      	orrs	r3, r1
 80002f6:	6093      	str	r3, [r2, #8]
	{
		//error
	}


}
 80002f8:	e05b      	b.n	80003b2 <MEXTI_vSelectPort+0x106>
	else if(Copy_eLineNUM <= 7)
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	2b07      	cmp	r3, #7
 80002fe:	d81b      	bhi.n	8000338 <MEXTI_vSelectPort+0x8c>
		MSYSCFG->EXTICR2 &= ~(0b1111 << (4 * (Copy_eLineNUM % 4)));
 8000300:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	79ba      	ldrb	r2, [r7, #6]
 8000306:	f002 0203 	and.w	r2, r2, #3
 800030a:	0092      	lsls	r2, r2, #2
 800030c:	210f      	movs	r1, #15
 800030e:	fa01 f202 	lsl.w	r2, r1, r2
 8000312:	43d2      	mvns	r2, r2
 8000314:	4611      	mov	r1, r2
 8000316:	4a2a      	ldr	r2, [pc, #168]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 8000318:	400b      	ands	r3, r1
 800031a:	60d3      	str	r3, [r2, #12]
		MSYSCFG->EXTICR2 |= (Copy_ePortNum << (4 * (Copy_eLineNUM % 4)));
 800031c:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	79f9      	ldrb	r1, [r7, #7]
 8000322:	79ba      	ldrb	r2, [r7, #6]
 8000324:	f002 0203 	and.w	r2, r2, #3
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	fa01 f202 	lsl.w	r2, r1, r2
 800032e:	4611      	mov	r1, r2
 8000330:	4a23      	ldr	r2, [pc, #140]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 8000332:	430b      	orrs	r3, r1
 8000334:	60d3      	str	r3, [r2, #12]
}
 8000336:	e03c      	b.n	80003b2 <MEXTI_vSelectPort+0x106>
	else if(Copy_eLineNUM <= 11)
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2b0b      	cmp	r3, #11
 800033c:	d81b      	bhi.n	8000376 <MEXTI_vSelectPort+0xca>
		MSYSCFG->EXTICR3 &= ~(0b1111 << (4 * (Copy_eLineNUM % 4)));
 800033e:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	79ba      	ldrb	r2, [r7, #6]
 8000344:	f002 0203 	and.w	r2, r2, #3
 8000348:	0092      	lsls	r2, r2, #2
 800034a:	210f      	movs	r1, #15
 800034c:	fa01 f202 	lsl.w	r2, r1, r2
 8000350:	43d2      	mvns	r2, r2
 8000352:	4611      	mov	r1, r2
 8000354:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 8000356:	400b      	ands	r3, r1
 8000358:	6113      	str	r3, [r2, #16]
		MSYSCFG->EXTICR3 |= (Copy_ePortNum << (4 * (Copy_eLineNUM % 4)));
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	79f9      	ldrb	r1, [r7, #7]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	f002 0203 	and.w	r2, r2, #3
 8000366:	0092      	lsls	r2, r2, #2
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 8000370:	430b      	orrs	r3, r1
 8000372:	6113      	str	r3, [r2, #16]
}
 8000374:	e01d      	b.n	80003b2 <MEXTI_vSelectPort+0x106>
	else if(Copy_eLineNUM <= 15)
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	2b0f      	cmp	r3, #15
 800037a:	d81a      	bhi.n	80003b2 <MEXTI_vSelectPort+0x106>
		MSYSCFG->EXTICR4 &= ~(0b1111 << (4 * (Copy_eLineNUM % 4)));
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	79ba      	ldrb	r2, [r7, #6]
 8000382:	f002 0203 	and.w	r2, r2, #3
 8000386:	0092      	lsls	r2, r2, #2
 8000388:	210f      	movs	r1, #15
 800038a:	fa01 f202 	lsl.w	r2, r1, r2
 800038e:	43d2      	mvns	r2, r2
 8000390:	4611      	mov	r1, r2
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 8000394:	400b      	ands	r3, r1
 8000396:	6153      	str	r3, [r2, #20]
		MSYSCFG->EXTICR4 |= (Copy_ePortNum << (4 * (Copy_eLineNUM % 4)));
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	79f9      	ldrb	r1, [r7, #7]
 800039e:	79ba      	ldrb	r2, [r7, #6]
 80003a0:	f002 0203 	and.w	r2, r2, #3
 80003a4:	0092      	lsls	r2, r2, #2
 80003a6:	fa01 f202 	lsl.w	r2, r1, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <MEXTI_vSelectPort+0x114>)
 80003ae:	430b      	orrs	r3, r1
 80003b0:	6153      	str	r3, [r2, #20]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40013800 	.word	0x40013800

080003c4 <MEXTI_vSetCallBack>:

/*Call Back Function to EXTI*/
void MEXTI_vSetCallBack( u8 Copy_EXTINum,  void (*Copy_EXTI_CallBack)(void))
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	6039      	str	r1, [r7, #0]
 80003ce:	71fb      	strb	r3, [r7, #7]
	EXTIx_CALLBACK[Copy_EXTINum] = Copy_EXTI_CallBack ;
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4905      	ldr	r1, [pc, #20]	; (80003e8 <MEXTI_vSetCallBack+0x24>)
 80003d4:	683a      	ldr	r2, [r7, #0]
 80003d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20001724 	.word	0x20001724

080003ec <EXTI0_IRQHandler>:


/***************************************   ISR FOR EXTIx    *******************************/

void EXTI0_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	SET_BIT(MEXTI -> PR , 0U);
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <EXTI0_IRQHandler+0x1c>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <EXTI0_IRQHandler+0x1c>)
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	6153      	str	r3, [r2, #20]
	EXTIx_CALLBACK[0]();
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <EXTI0_IRQHandler+0x20>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4798      	blx	r3
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40013c00 	.word	0x40013c00
 800040c:	20001724 	.word	0x20001724

08000410 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	SET_BIT(MEXTI -> PR , 1U);
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <EXTI1_IRQHandler+0x1c>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <EXTI1_IRQHandler+0x1c>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6153      	str	r3, [r2, #20]
	EXTIx_CALLBACK[1]();
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <EXTI1_IRQHandler+0x20>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4798      	blx	r3
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40013c00 	.word	0x40013c00
 8000430:	20001724 	.word	0x20001724

08000434 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	SET_BIT(MEXTI -> PR , 2U);
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <EXTI2_IRQHandler+0x1c>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <EXTI2_IRQHandler+0x1c>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6153      	str	r3, [r2, #20]
	EXTIx_CALLBACK[2]();
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <EXTI2_IRQHandler+0x20>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4798      	blx	r3
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40013c00 	.word	0x40013c00
 8000454:	20001724 	.word	0x20001724

08000458 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	SET_BIT(MEXTI -> PR , 3U);
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <EXTI3_IRQHandler+0x1c>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <EXTI3_IRQHandler+0x1c>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6153      	str	r3, [r2, #20]
	EXTIx_CALLBACK[3]();
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <EXTI3_IRQHandler+0x20>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	4798      	blx	r3
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40013c00 	.word	0x40013c00
 8000478:	20001724 	.word	0x20001724

0800047c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	SET_BIT(MEXTI -> PR , 4U);
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <EXTI4_IRQHandler+0x1c>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <EXTI4_IRQHandler+0x1c>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6153      	str	r3, [r2, #20]
	EXTIx_CALLBACK[4]();
 800048c:	4b03      	ldr	r3, [pc, #12]	; (800049c <EXTI4_IRQHandler+0x20>)
 800048e:	691b      	ldr	r3, [r3, #16]
 8000490:	4798      	blx	r3
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40013c00 	.word	0x40013c00
 800049c:	20001724 	.word	0x20001724

080004a0 <MGPIO_voidSetPinMode>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8Mod                         */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  )
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	460b      	mov	r3, r1
 80004ac:	71bb      	strb	r3, [r7, #6]
 80004ae:	4613      	mov	r3, r2
 80004b0:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d857      	bhi.n	8000568 <MGPIO_voidSetPinMode+0xc8>
 80004b8:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <MGPIO_voidSetPinMode+0x20>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004d9 	.word	0x080004d9
 80004c4:	080004f1 	.word	0x080004f1
 80004c8:	08000509 	.word	0x08000509
 80004cc:	08000521 	.word	0x08000521
 80004d0:	08000539 	.word	0x08000539
 80004d4:	08000551 	.word	0x08000551
	{
	case MGPIOA_PORT : MGPIOA->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80004d8:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MGPIO_voidSetPinMode+0xd8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	7979      	ldrb	r1, [r7, #5]
 80004de:	79ba      	ldrb	r2, [r7, #6]
 80004e0:	0052      	lsls	r2, r2, #1
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a23      	ldr	r2, [pc, #140]	; (8000578 <MGPIO_voidSetPinMode+0xd8>)
 80004ea:	430b      	orrs	r3, r1
 80004ec:	6013      	str	r3, [r2, #0]
 80004ee:	e03c      	b.n	800056a <MGPIO_voidSetPinMode+0xca>
	case MGPIOB_PORT : MGPIOB->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <MGPIO_voidSetPinMode+0xdc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	7979      	ldrb	r1, [r7, #5]
 80004f6:	79ba      	ldrb	r2, [r7, #6]
 80004f8:	0052      	lsls	r2, r2, #1
 80004fa:	fa01 f202 	lsl.w	r2, r1, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a1e      	ldr	r2, [pc, #120]	; (800057c <MGPIO_voidSetPinMode+0xdc>)
 8000502:	430b      	orrs	r3, r1
 8000504:	6013      	str	r3, [r2, #0]
 8000506:	e030      	b.n	800056a <MGPIO_voidSetPinMode+0xca>
	case MGPIOC_PORT : MGPIOC->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MGPIO_voidSetPinMode+0xe0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	7979      	ldrb	r1, [r7, #5]
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	0052      	lsls	r2, r2, #1
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	4611      	mov	r1, r2
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <MGPIO_voidSetPinMode+0xe0>)
 800051a:	430b      	orrs	r3, r1
 800051c:	6013      	str	r3, [r2, #0]
 800051e:	e024      	b.n	800056a <MGPIO_voidSetPinMode+0xca>
	case MGPIOD_PORT : MGPIOD->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MGPIO_voidSetPinMode+0xe4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	7979      	ldrb	r1, [r7, #5]
 8000526:	79ba      	ldrb	r2, [r7, #6]
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	4611      	mov	r1, r2
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <MGPIO_voidSetPinMode+0xe4>)
 8000532:	430b      	orrs	r3, r1
 8000534:	6013      	str	r3, [r2, #0]
 8000536:	e018      	b.n	800056a <MGPIO_voidSetPinMode+0xca>
	case MGPIOE_PORT : MGPIOE->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MGPIO_voidSetPinMode+0xe8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	7979      	ldrb	r1, [r7, #5]
 800053e:	79ba      	ldrb	r2, [r7, #6]
 8000540:	0052      	lsls	r2, r2, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <MGPIO_voidSetPinMode+0xe8>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e00c      	b.n	800056a <MGPIO_voidSetPinMode+0xca>
	case MGPIOH_PORT : MGPIOH->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MGPIO_voidSetPinMode+0xec>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	7979      	ldrb	r1, [r7, #5]
 8000556:	79ba      	ldrb	r2, [r7, #6]
 8000558:	0052      	lsls	r2, r2, #1
 800055a:	fa01 f202 	lsl.w	r2, r1, r2
 800055e:	4611      	mov	r1, r2
 8000560:	4a0a      	ldr	r2, [pc, #40]	; (800058c <MGPIO_voidSetPinMode+0xec>)
 8000562:	430b      	orrs	r3, r1
 8000564:	6013      	str	r3, [r2, #0]
 8000566:	e000      	b.n	800056a <MGPIO_voidSetPinMode+0xca>

	default :  /*Error*/   break ;
 8000568:	bf00      	nop
	}	
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40020000 	.word	0x40020000
 800057c:	40020400 	.word	0x40020400
 8000580:	40020800 	.word	0x40020800
 8000584:	40020c00 	.word	0x40020c00
 8000588:	40021000 	.word	0x40021000
 800058c:	40021c00 	.word	0x40021c00

08000590 <MGPIO_voidSetPinAltFun>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum  , Copy_u8AlFun                        */                   
/* 3- Function Return      -> NO THING                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinAltFun(u8 Copy_u8PortName ,u8 Copy_u8PinNum, u8 Copy_u8AlFun) 
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
 800059a:	460b      	mov	r3, r1
 800059c:	71bb      	strb	r3, [r7, #6]
 800059e:	4613      	mov	r3, r2
 80005a0:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2b07      	cmp	r3, #7
 80005a6:	d82d      	bhi.n	8000604 <MGPIO_voidSetPinAltFun+0x74>
	{
		switch(Copy_u8PortName)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d01e      	beq.n	80005ec <MGPIO_voidSetPinAltFun+0x5c>
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	dc5c      	bgt.n	800066c <MGPIO_voidSetPinAltFun+0xdc>
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <MGPIO_voidSetPinAltFun+0x2c>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d00c      	beq.n	80005d4 <MGPIO_voidSetPinAltFun+0x44>
		{
		case MGPIOA_PORT:MGPIOA->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
		case MGPIOB_PORT:MGPIOB->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
		case MGPIOC_PORT:MGPIOC->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
		default : break ;
 80005ba:	e057      	b.n	800066c <MGPIO_voidSetPinAltFun+0xdc>
		case MGPIOA_PORT:MGPIOA->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <MGPIO_voidSetPinAltFun+0xf0>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	7979      	ldrb	r1, [r7, #5]
 80005c2:	79ba      	ldrb	r2, [r7, #6]
 80005c4:	0092      	lsls	r2, r2, #2
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a2c      	ldr	r2, [pc, #176]	; (8000680 <MGPIO_voidSetPinAltFun+0xf0>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	6213      	str	r3, [r2, #32]
 80005d2:	e04e      	b.n	8000672 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOB_PORT:MGPIOB->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <MGPIO_voidSetPinAltFun+0xf4>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	7979      	ldrb	r1, [r7, #5]
 80005da:	79ba      	ldrb	r2, [r7, #6]
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	fa01 f202 	lsl.w	r2, r1, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <MGPIO_voidSetPinAltFun+0xf4>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	6213      	str	r3, [r2, #32]
 80005ea:	e042      	b.n	8000672 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOC_PORT:MGPIOC->AFRL  |=(u32)(Copy_u8AlFun << (4U*Copy_u8PinNum)) ; break ;
 80005ec:	4b26      	ldr	r3, [pc, #152]	; (8000688 <MGPIO_voidSetPinAltFun+0xf8>)
 80005ee:	6a1b      	ldr	r3, [r3, #32]
 80005f0:	7979      	ldrb	r1, [r7, #5]
 80005f2:	79ba      	ldrb	r2, [r7, #6]
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <MGPIO_voidSetPinAltFun+0xf8>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	6213      	str	r3, [r2, #32]
 8000602:	e036      	b.n	8000672 <MGPIO_voidSetPinAltFun+0xe2>
		}
	}
	else
	{
		switch(Copy_u8PortName)
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d022      	beq.n	8000650 <MGPIO_voidSetPinAltFun+0xc0>
 800060a:	2b02      	cmp	r3, #2
 800060c:	dc30      	bgt.n	8000670 <MGPIO_voidSetPinAltFun+0xe0>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <MGPIO_voidSetPinAltFun+0x88>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00e      	beq.n	8000634 <MGPIO_voidSetPinAltFun+0xa4>
		{
		case MGPIOA_PORT:MGPIOA->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
		case MGPIOB_PORT:MGPIOB->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
		case MGPIOC_PORT:MGPIOC->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
		default : break ;
 8000616:	e02b      	b.n	8000670 <MGPIO_voidSetPinAltFun+0xe0>
		case MGPIOA_PORT:MGPIOA->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MGPIO_voidSetPinAltFun+0xf0>)
 800061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061c:	7979      	ldrb	r1, [r7, #5]
 800061e:	79ba      	ldrb	r2, [r7, #6]
 8000620:	f002 0207 	and.w	r2, r2, #7
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	fa01 f202 	lsl.w	r2, r1, r2
 800062a:	4611      	mov	r1, r2
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <MGPIO_voidSetPinAltFun+0xf0>)
 800062e:	430b      	orrs	r3, r1
 8000630:	6253      	str	r3, [r2, #36]	; 0x24
 8000632:	e01e      	b.n	8000672 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOB_PORT:MGPIOB->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MGPIO_voidSetPinAltFun+0xf4>)
 8000636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000638:	7979      	ldrb	r1, [r7, #5]
 800063a:	79ba      	ldrb	r2, [r7, #6]
 800063c:	f002 0207 	and.w	r2, r2, #7
 8000640:	0092      	lsls	r2, r2, #2
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	4611      	mov	r1, r2
 8000648:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <MGPIO_voidSetPinAltFun+0xf4>)
 800064a:	430b      	orrs	r3, r1
 800064c:	6253      	str	r3, [r2, #36]	; 0x24
 800064e:	e010      	b.n	8000672 <MGPIO_voidSetPinAltFun+0xe2>
		case MGPIOC_PORT:MGPIOC->AFRH  |=(u32)(Copy_u8AlFun << (4U*(Copy_u8PinNum%8))) ; break ;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MGPIO_voidSetPinAltFun+0xf8>)
 8000652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000654:	7979      	ldrb	r1, [r7, #5]
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	f002 0207 	and.w	r2, r2, #7
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	4611      	mov	r1, r2
 8000664:	4a08      	ldr	r2, [pc, #32]	; (8000688 <MGPIO_voidSetPinAltFun+0xf8>)
 8000666:	430b      	orrs	r3, r1
 8000668:	6253      	str	r3, [r2, #36]	; 0x24
 800066a:	e002      	b.n	8000672 <MGPIO_voidSetPinAltFun+0xe2>
		default : break ;
 800066c:	bf00      	nop
 800066e:	e000      	b.n	8000672 <MGPIO_voidSetPinAltFun+0xe2>
		default : break ;
 8000670:	bf00      	nop
		}

	}
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800

0800068c <MRCC_voidEnablePeripheralClock>:
   @param[in]   Copy_uddtBusName  : The Bus of The Peripheral [AHB1 , AHB2 , APB1 ,APB2] Every one  Detect 
   Which REG to Choise Peripherial From It   
   @param[in]   Copy_u8PerNum  : The order of Peripheral On The Selected Register
 */
void MRCC_voidEnablePeripheralClock(BusName_t Copy_uddtBusName,u8 Copy_u8PerNum)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtBusName)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	d862      	bhi.n	8000768 <MRCC_voidEnablePeripheralClock+0xdc>
 80006a2:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <MRCC_voidEnablePeripheralClock+0x1c>)
 80006a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a8:	080006c9 	.word	0x080006c9
 80006ac:	080006dd 	.word	0x080006dd
 80006b0:	080006f1 	.word	0x080006f1
 80006b4:	08000705 	.word	0x08000705
 80006b8:	08000719 	.word	0x08000719
 80006bc:	0800072d 	.word	0x0800072d
 80006c0:	08000741 	.word	0x08000741
 80006c4:	08000755 	.word	0x08000755
	{  
	case AHB1  :    SET_BIT(RCC_AHB1ENR,Copy_u8PerNum) ; break ;
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MRCC_voidEnablePeripheralClock+0xec>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2101      	movs	r1, #1
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	4928      	ldr	r1, [pc, #160]	; (8000778 <MRCC_voidEnablePeripheralClock+0xec>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]
 80006da:	e046      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	case AHB2  :    SET_BIT(RCC_AHB2ENR,Copy_u8PerNum) ; break ;
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <MRCC_voidEnablePeripheralClock+0xf0>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	4924      	ldr	r1, [pc, #144]	; (800077c <MRCC_voidEnablePeripheralClock+0xf0>)
 80006ea:	4313      	orrs	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
 80006ee:	e03c      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	case APB1  :    SET_BIT(RCC_APB1ENR,Copy_u8PerNum) ; break ;
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MRCC_voidEnablePeripheralClock+0xf4>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	2101      	movs	r1, #1
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	4920      	ldr	r1, [pc, #128]	; (8000780 <MRCC_voidEnablePeripheralClock+0xf4>)
 80006fe:	4313      	orrs	r3, r2
 8000700:	600b      	str	r3, [r1, #0]
 8000702:	e032      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	case APB2  :    SET_BIT(RCC_APB2ENR,Copy_u8PerNum) ; break ;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MRCC_voidEnablePeripheralClock+0xf8>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	491c      	ldr	r1, [pc, #112]	; (8000784 <MRCC_voidEnablePeripheralClock+0xf8>)
 8000712:	4313      	orrs	r3, r2
 8000714:	600b      	str	r3, [r1, #0]
 8000716:	e028      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	case AHB1LP:	SET_BIT(RCC_AHB1LPENR,Copy_u8PerNum);   break;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <MRCC_voidEnablePeripheralClock+0xfc>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f303 	lsl.w	r3, r1, r3
 8000724:	4918      	ldr	r1, [pc, #96]	; (8000788 <MRCC_voidEnablePeripheralClock+0xfc>)
 8000726:	4313      	orrs	r3, r2
 8000728:	600b      	str	r3, [r1, #0]
 800072a:	e01e      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	case AHB2LP:	SET_BIT(RCC_AHB2LPENR,Copy_u8PerNum);   break;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MRCC_voidEnablePeripheralClock+0x100>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	2101      	movs	r1, #1
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	4914      	ldr	r1, [pc, #80]	; (800078c <MRCC_voidEnablePeripheralClock+0x100>)
 800073a:	4313      	orrs	r3, r2
 800073c:	600b      	str	r3, [r1, #0]
 800073e:	e014      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	case APB1LP:	SET_BIT(RCC_APB1LPENR,Copy_u8PerNum);   break;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MRCC_voidEnablePeripheralClock+0x104>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	4910      	ldr	r1, [pc, #64]	; (8000790 <MRCC_voidEnablePeripheralClock+0x104>)
 800074e:	4313      	orrs	r3, r2
 8000750:	600b      	str	r3, [r1, #0]
 8000752:	e00a      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	case APB2LP:	SET_BIT(RCC_APB2LPENR,Copy_u8PerNum);   break;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MRCC_voidEnablePeripheralClock+0x108>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <MRCC_voidEnablePeripheralClock+0x108>)
 8000762:	4313      	orrs	r3, r2
 8000764:	600b      	str	r3, [r1, #0]
 8000766:	e000      	b.n	800076a <MRCC_voidEnablePeripheralClock+0xde>
	default    : /* ERROR*/         break ;
 8000768:	bf00      	nop
	}

}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023830 	.word	0x40023830
 800077c:	40023834 	.word	0x40023834
 8000780:	40023840 	.word	0x40023840
 8000784:	40023844 	.word	0x40023844
 8000788:	40023850 	.word	0x40023850
 800078c:	40023854 	.word	0x40023854
 8000790:	40023860 	.word	0x40023860
 8000794:	40023864 	.word	0x40023864

08000798 <MRCC_voidInitSystemClk>:
/*
   @fu MRCC_voidInitSystemClk 
   @brief   This Function used To Initializaion for System clock   
 */
void MRCC_voidInitSystemClk(void)
{   
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	/***************HSI************/
#if MRCC_CLKSRC == HSI
	/*1- Enable HSI */
	SET_BIT(RCC_CR,0U);
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MRCC_voidInitSystemClk+0x34>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <MRCC_voidInitSystemClk+0x34>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6013      	str	r3, [r2, #0]
	/*2-Clk System -->HSI */
	CLR_BIT(RCC_CFGR,0U);
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MRCC_voidInitSystemClk+0x38>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MRCC_voidInitSystemClk+0x38>)
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,1U);
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MRCC_voidInitSystemClk+0x38>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <MRCC_voidInitSystemClk+0x38>)
 80007ba:	f023 0302 	bic.w	r3, r3, #2
 80007be:	6013      	str	r3, [r2, #0]
#error "Invalid Option For Clock Source  ..... "
#endif
	/*#####################################################################*/
	/*                  THE END OF PROGRAM FILE                      */
	/*#####################################################################*/
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40023808 	.word	0x40023808

080007d4 <MSTK_voidInit>:
/*******************************************************************************************************/



void MSTK_voidInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

	/* Disable Systick Interrupt - Stop Systick - CLOCK Source = AHB / 8 */
	MSTK->CTRL = 0x00000000 ;   //Clr_ALL_BITS(MSTK->CTRL) ;
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <MSTK_voidInit+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]


}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e010 	.word	0xe000e010

080007ec <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	//volatile u8 LOC_u8Temp = 0 ;
  /*Call Back Notification*/
	MSTK_CallBack() ;
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <SysTick_Handler+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4798      	blx	r3

	/*Clear Flag */
	//LOC_u8Temp  = MSTK_u8ReadFlag()  ;

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20001764 	.word	0x20001764

08000800 <MUSART_voidInit>:

static void(*MUSART_CALLPTR)(void)   = NULL ;


void MUSART_voidInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

	/*Set Boaud Rate*/
	MUSART1->BRR = 0x00000683 ;   //baudRate 9600 bps
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <MUSART_voidInit+0x6c>)
 8000806:	f240 6283 	movw	r2, #1667	; 0x683
 800080a:	609a      	str	r2, [r3, #8]
	/*OverSampling 16 Sample*/
	MUSART1->CR1.OVER8 = 0 ;   //BitField
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <MUSART_voidInit+0x6c>)
 800080e:	68d3      	ldr	r3, [r2, #12]
 8000810:	f36f 33cf 	bfc	r3, #15, #1
 8000814:	60d3      	str	r3, [r2, #12]
	/*8 Bit Word size*/
	MUSART1->CR1.M = 0 ;
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MUSART_voidInit+0x6c>)
 8000818:	68d3      	ldr	r3, [r2, #12]
 800081a:	f36f 330c 	bfc	r3, #12, #1
 800081e:	60d3      	str	r3, [r2, #12]
	/*Disable Parity*/
	MUSART1->CR1.PCE = 	0 ;
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <MUSART_voidInit+0x6c>)
 8000822:	68d3      	ldr	r3, [r2, #12]
 8000824:	f36f 238a 	bfc	r3, #10, #1
 8000828:	60d3      	str	r3, [r2, #12]
	/*one Stop Bit*/
	CLR_BIT(MUSART1->CR2,12);
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MUSART_voidInit+0x6c>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MUSART_voidInit+0x6c>)
 8000830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000834:	6113      	str	r3, [r2, #16]
	CLR_BIT(MUSART1->CR2,13);
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MUSART_voidInit+0x6c>)
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	4a0c      	ldr	r2, [pc, #48]	; (800086c <MUSART_voidInit+0x6c>)
 800083c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000840:	6113      	str	r3, [r2, #16]
	/*Enable Trasmitter */
	MUSART1->CR1.TE = 1 ;
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <MUSART_voidInit+0x6c>)
 8000844:	68d3      	ldr	r3, [r2, #12]
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	60d3      	str	r3, [r2, #12]
	/*Enable Receiver*/
	MUSART1->CR1.RE = 1 ;
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <MUSART_voidInit+0x6c>)
 800084e:	68d3      	ldr	r3, [r2, #12]
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	60d3      	str	r3, [r2, #12]
	/*Receive interrupt  Enable*/
	MUSART1->CR1.RXNEIE = 1 ;
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <MUSART_voidInit+0x6c>)
 8000858:	68d3      	ldr	r3, [r2, #12]
 800085a:	f043 0320 	orr.w	r3, r3, #32
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40011000 	.word	0x40011000

08000870 <MUSART_voidSendData>:

void MUSART_voidSendData(u8* copy_u8Data,u8 Copy_u8Len)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
   for(u8 Copy_u8Iterator = 0 ; Copy_u8Iterator < Copy_u8Len ; Copy_u8Iterator++ )
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e010      	b.n	80008a4 <MUSART_voidSendData+0x34>
   {
	   /*Send Byte*/
	   MUSART1->DR = copy_u8Data[Copy_u8Iterator] ;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MUSART_voidSendData+0x4c>)
 800088c:	605a      	str	r2, [r3, #4]
	   /*wait until data transfer is complete from Transmitter buffer register to shift Transmitter Register*/
	   while(GET_BIT(MUSART1->SR,7) == 0) ;
 800088e:	bf00      	nop
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MUSART_voidSendData+0x4c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	09db      	lsrs	r3, r3, #7
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f8      	beq.n	8000890 <MUSART_voidSendData+0x20>
   for(u8 Copy_u8Iterator = 0 ; Copy_u8Iterator < Copy_u8Len ; Copy_u8Iterator++ )
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3301      	adds	r3, #1
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	7bfa      	ldrb	r2, [r7, #15]
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3ea      	bcc.n	8000882 <MUSART_voidSendData+0x12>
   }

}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40011000 	.word	0x40011000

080008c0 <MUSART_u8ReadDataSynch>:
	 return (u8) MUSART1->DR  ;
}


u8 MUSART_u8ReadDataSynch(u8 *Copy_u8DataCome)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  u8 LOC_u8Status = 1 ;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
  if(GET_BIT(MUSART1->SR,5) == 1)
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MUSART_u8ReadDataSynch+0x38>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <MUSART_u8ReadDataSynch+0x26>
  {
	  *Copy_u8DataCome = MUSART1->DR  ;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MUSART_u8ReadDataSynch+0x38>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e001      	b.n	80008ea <MUSART_u8ReadDataSynch+0x2a>
  }
  else
  {
	  LOC_u8Status = 0 ;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
  }

return  LOC_u8Status ;
 80008ea:	7bfb      	ldrb	r3, [r7, #15]

}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40011000 	.word	0x40011000

080008fc <MUSART_voidEnable>:

void MUSART_voidEnable(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /*UART Enable*/
  MUSART1->CR1.UE =  1 ;
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <MUSART_voidEnable+0x18>)
 8000902:	68d3      	ldr	r3, [r2, #12]
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	60d3      	str	r3, [r2, #12]
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40011000 	.word	0x40011000

08000918 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	MUSART_CALLPTR() ;
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <USART1_IRQHandler+0x10>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4798      	blx	r3
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20001768 	.word	0x20001768

0800092c <MNVIC_vEnableIRQ>:
#include "NVIC_config.h"
#include "NVIC_interface.h"
#include "NVIC_private.h"

void MNVIC_vEnableIRQ(IRQn_t Copy_tIRQ)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	SET_BIT(NVIV_REG->NVIC_ISER[Copy_tIRQ/32], (Copy_tIRQ % 32));
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <MNVIC_vEnableIRQ+0x38>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	b2d8      	uxtb	r0, r3
 800093e:	4603      	mov	r3, r0
 8000940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 031f 	and.w	r3, r3, #31
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	4904      	ldr	r1, [pc, #16]	; (8000964 <MNVIC_vEnableIRQ+0x38>)
 8000952:	4313      	orrs	r3, r2
 8000954:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000e100 	.word	0xe000e100

08000968 <main>:
u8 * data ;

void EXTI_Func(void);

void main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

	/*Step 1 : System Clock is 16 MHz From HSI*/
	MRCC_voidInitSystemClk();
 800096c:	f7ff ff14 	bl	8000798 <MRCC_voidInitSystemClk>

	/*Step 2 : Enable GPIO Peripherial Clock For Port A*/
	MRCC_voidEnablePeripheralClock(AHB1,MRCC_PERIPHERAL_EN_GPIOA);
 8000970:	2100      	movs	r1, #0
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fe8a 	bl	800068c <MRCC_voidEnablePeripheralClock>

	/*Step 2 : Enable USART1 Peripherial Clock */
	MRCC_voidEnablePeripheralClock(APB2,MRCC_PERIPHERAL_EN_USART1);
 8000978:	2104      	movs	r1, #4
 800097a:	2003      	movs	r0, #3
 800097c:	f7ff fe86 	bl	800068c <MRCC_voidEnablePeripheralClock>

	/*Step 3 :  Enable SYSCFG */
	MRCC_voidEnablePeripheralClock(APB2,MRCC_PERIPHERAL_EN_SYSCFG);
 8000980:	210e      	movs	r1, #14
 8000982:	2003      	movs	r0, #3
 8000984:	f7ff fe82 	bl	800068c <MRCC_voidEnablePeripheralClock>

	/*Step 4 : Enable EXTI_PORTB_0  */
	MNVIC_vEnableIRQ(EXTI0_IRQn);
 8000988:	2006      	movs	r0, #6
 800098a:	f7ff ffcf 	bl	800092c <MNVIC_vEnableIRQ>
	MEXTI_vEventTriggerType(_EXTI_LINE_0 , _RAISE_STATE );
 800098e:	2100      	movs	r1, #0
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fc35 	bl	8000200 <MEXTI_vEventTriggerType>
	MEXTI_vSelectPort(PORTB_EXTI ,  _EXTI_LINE_0);
 8000996:	2100      	movs	r1, #0
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fc87 	bl	80002ac <MEXTI_vSelectPort>
	MEXTI_vSetCallBack( _EXTI_LINE_0,  EXTI_Func);
 800099e:	4911      	ldr	r1, [pc, #68]	; (80009e4 <main+0x7c>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fd0f 	bl	80003c4 <MEXTI_vSetCallBack>
	MEXTI_vEnableLine(_EXTI_LINE_0);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fc14 	bl	80001d4 <MEXTI_vEnableLine>

	/*Step 5 : Set Pin Mode For Pins 9 , 10 -> Alternative Function */
	MGPIO_voidSetPinMode(MGPIOA_PORT,MGPIO_PIN9,MGPIO_MODE_ALTF) ;    //TX-> USART1
 80009ac:	2202      	movs	r2, #2
 80009ae:	2109      	movs	r1, #9
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fd75 	bl	80004a0 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MGPIOA_PORT,MGPIO_PIN10,MGPIO_MODE_ALTF) ;   //RX-> USART1
 80009b6:	2202      	movs	r2, #2
 80009b8:	210a      	movs	r1, #10
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fd70 	bl	80004a0 <MGPIO_voidSetPinMode>

	/*Step 6 : Set Pin Alternative function For Pins 9 , 10  */
	MGPIO_voidSetPinAltFun(MGPIOA_PORT,MGPIO_PIN9,7) ;                //TX-> USART1
 80009c0:	2207      	movs	r2, #7
 80009c2:	2109      	movs	r1, #9
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fde3 	bl	8000590 <MGPIO_voidSetPinAltFun>
	MGPIO_voidSetPinAltFun(MGPIOA_PORT,MGPIO_PIN10,7) ;               //RX-> USART1
 80009ca:	2207      	movs	r2, #7
 80009cc:	210a      	movs	r1, #10
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff fdde 	bl	8000590 <MGPIO_voidSetPinAltFun>

	/*Step 7 : MUSART Initialization*/
	MUSART_voidInit() ; /*9600bps , 1 stop bits  , no parity , 8  bit data*/
 80009d4:	f7ff ff14 	bl	8000800 <MUSART_voidInit>

	/*Step 8 : Enable MUSART */
	MUSART_voidEnable() ;
 80009d8:	f7ff ff90 	bl	80008fc <MUSART_voidEnable>



	/*Step 9: init Systick*/
	MSTK_voidInit() ; /*disable STK , Interrupt , Tick = 0.5 Micro second --> HSI/8 --> 2MHz*/
 80009dc:	f7ff fefa 	bl	80007d4 <MSTK_voidInit>



	while(1)
 80009e0:	e7fe      	b.n	80009e0 <main+0x78>
 80009e2:	bf00      	nop
 80009e4:	080009e9 	.word	0x080009e9

080009e8 <EXTI_Func>:

}


void EXTI_Func(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	MUSART_voidSendData((u8*)GLB_u16Data1[0] , 44);
 80009ee:	212c      	movs	r1, #44	; 0x2c
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <EXTI_Func+0x60>)
 80009f2:	f7ff ff3d 	bl	8000870 <MUSART_voidSendData>
	for(int count = 0  ; count< 134 ; count++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e01d      	b.n	8000a38 <EXTI_Func+0x50>
	{
		MUSART_voidSendData((u8*)GLB_u16Data1[count] , 44);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	222c      	movs	r2, #44	; 0x2c
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <EXTI_Func+0x60>)
 8000a06:	4413      	add	r3, r2
 8000a08:	212c      	movs	r1, #44	; 0x2c
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff30 	bl	8000870 <MUSART_voidSendData>


		while(data[0] != 'O' && data[1] != 'K' )
 8000a10:	e004      	b.n	8000a1c <EXTI_Func+0x34>
		{
			MUSART_u8ReadDataSynch(data) ;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <EXTI_Func+0x64>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff52 	bl	80008c0 <MUSART_u8ReadDataSynch>
		while(data[0] != 'O' && data[1] != 'K' )
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <EXTI_Func+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b4f      	cmp	r3, #79	; 0x4f
 8000a24:	d005      	beq.n	8000a32 <EXTI_Func+0x4a>
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <EXTI_Func+0x64>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b4b      	cmp	r3, #75	; 0x4b
 8000a30:	d1ef      	bne.n	8000a12 <EXTI_Func+0x2a>
	for(int count = 0  ; count< 134 ; count++)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3301      	adds	r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b85      	cmp	r3, #133	; 0x85
 8000a3c:	ddde      	ble.n	80009fc <EXTI_Func+0x14>

		}
	}

}
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	2000176c 	.word	0x2000176c

08000a50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a54:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a7e:	f000 f811 	bl	8000aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a82:	f7ff ff71 	bl	8000968 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   r0, =_estack
 8000a88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20001708 	.word	0x20001708
  ldr r2, =_sidata
 8000a94:	08000b0c 	.word	0x08000b0c
  ldr r2, =_sbss
 8000a98:	20001708 	.word	0x20001708
  ldr r4, =_ebss
 8000a9c:	20001770 	.word	0x20001770

08000aa0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <__libc_init_array>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	4d0d      	ldr	r5, [pc, #52]	; (8000adc <__libc_init_array+0x38>)
 8000aa8:	4c0d      	ldr	r4, [pc, #52]	; (8000ae0 <__libc_init_array+0x3c>)
 8000aaa:	1b64      	subs	r4, r4, r5
 8000aac:	10a4      	asrs	r4, r4, #2
 8000aae:	2600      	movs	r6, #0
 8000ab0:	42a6      	cmp	r6, r4
 8000ab2:	d109      	bne.n	8000ac8 <__libc_init_array+0x24>
 8000ab4:	4d0b      	ldr	r5, [pc, #44]	; (8000ae4 <__libc_init_array+0x40>)
 8000ab6:	4c0c      	ldr	r4, [pc, #48]	; (8000ae8 <__libc_init_array+0x44>)
 8000ab8:	f000 f818 	bl	8000aec <_init>
 8000abc:	1b64      	subs	r4, r4, r5
 8000abe:	10a4      	asrs	r4, r4, #2
 8000ac0:	2600      	movs	r6, #0
 8000ac2:	42a6      	cmp	r6, r4
 8000ac4:	d105      	bne.n	8000ad2 <__libc_init_array+0x2e>
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000acc:	4798      	blx	r3
 8000ace:	3601      	adds	r6, #1
 8000ad0:	e7ee      	b.n	8000ab0 <__libc_init_array+0xc>
 8000ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad6:	4798      	blx	r3
 8000ad8:	3601      	adds	r6, #1
 8000ada:	e7f2      	b.n	8000ac2 <__libc_init_array+0x1e>
 8000adc:	08000b04 	.word	0x08000b04
 8000ae0:	08000b04 	.word	0x08000b04
 8000ae4:	08000b04 	.word	0x08000b04
 8000ae8:	08000b08 	.word	0x08000b08

08000aec <_init>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	bf00      	nop
 8000af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af2:	bc08      	pop	{r3}
 8000af4:	469e      	mov	lr, r3
 8000af6:	4770      	bx	lr

08000af8 <_fini>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	bf00      	nop
 8000afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afe:	bc08      	pop	{r3}
 8000b00:	469e      	mov	lr, r3
 8000b02:	4770      	bx	lr
